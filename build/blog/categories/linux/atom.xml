<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | memoryboxes blog]]></title>
  <link href="http://memoryboxes.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://memoryboxes.github.io/"/>
  <updated>2016-12-18T15:56:15+08:00</updated>
  <id>http://memoryboxes.github.io/</id>
  <author>
    <name><![CDATA[memoryboxes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Write Standard Startup Script]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/08/22/how-to-write-standard-startup-script/"/>
    <updated>2016-08-22T09:09:06+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/08/22/how-to-write-standard-startup-script</id>
    <content type="html"><![CDATA[<p>centos6中的init.d systemV script升级为systemd startup script，让我们有个easy setup的模板&hellip;</p>

<p>模板实例:</p>

<!-- more -->


<h2>systemV init script template</h2>

<p>```</p>

<h1>!/bin/bash</h1>

<h1>testclient &ndash; Startup script for testclient</h1>

<h1>chkconfig: 35 85 15</h1>

<h1>description: testclient is your openstack VMS monitor and ovs auto config bot.</h1>

<h1>processname: testclient</h1>

<h1>config: /etc/testclient.conf</h1>

<p>. /etc/rc.d/init.d/functions</p>

<h1>NOTE: if you change any OPTIONS here, you get what you pay for:</h1>

<h1>this script assumes all options are in the config file.</h1>

<p>CONFIGFILE=&ldquo;/etc/testclient.conf&rdquo;</p>

<p>testCLIENT=/usr/local/bin/testclient</p>

<p>testCLIENT_USER=helloworldtest
testCLIENT_GROUP=helloworldtest</p>

<h1>things from testclient.conf get there by testclient reading it</h1>

<p>PIDFILEPATH=<code>awk -F'[:=]' -v IGNORECASE=1 '/^[[:blank:]]*(processManagement\.)?pidFilePath[[:blank:]]*[:=][[:blank:]]*/{print $2}' "$CONFIGFILE" | tr -d "[:blank:]\"'" | aw
PIDDIR=</code>dirname $PIDFILEPATH<code>
LOGFILEPATH=</code>awk -F'[:=]&lsquo; -v IGNORECASE=1 &rsquo;/^[[:blank:]]<em>(processManagement.)?logFilePath[[:blank:]]</em>[:=][[:blank:]]*/{print $2}&lsquo; &ldquo;$CONFIGFILE&rdquo; | tr -d &ldquo;[:blank:]\&rdquo;&rsquo;&ldquo; | aw
LOGDIR=<code>dirname $LOGFILEPATH</code></p>

<p>OPTIONS=&ldquo; -c $CONFIGFILE&rdquo;</p>

<p>start()
{
  # Make sure the default pidfile directory exists
  if [ ! -d $PIDDIR ]; then</p>

<pre><code>install -d -m 0755 -o $testCLIENT_USER -g $testCLIENT_GROUP $PIDDIR
</code></pre>

<p>  fi
  if [ ! -d $LOGDIR ]; then</p>

<pre><code>install -d -m 0755 -o $testCLIENT_USER -g $testCLIENT_GROUP $LOGDIR
</code></pre>

<p>  fi</p>

<p>  echo -n $&ldquo;Starting testclient: &rdquo;
  daemon &mdash;pidfile &ldquo;$PIDFILEPATH&rdquo; &mdash;user &ldquo;$testCLIENT_USER&rdquo; &mdash;check $testCLIENT &ldquo;$testCLIENT $OPTIONS >$LOGFILEPATH 2>&amp;1 &amp;&rdquo;</p>

<p>  RETVAL=$?
  pid=<code>ps -A x | grep $testCLIENT | grep -v grep | cut -d" " -f1 | head -n 1</code>
  if [ -n &ldquo;$pid&rdquo; ]; then</p>

<pre><code>      echo $pid &gt; $PIDFILEPATH
</code></pre>

<p>  fi</p>

<p>  [ $RETVAL -eq 0 ] &amp;&amp; touch /var/lock/subsys/testclient
  echo
  return $RETVAL
}</p>

<p>stop()
{
  echo -n $&ldquo;Stopping testclient: &rdquo;
  testclient_killproc &ldquo;$PIDFILEPATH&rdquo; $testCLIENT
  RETVAL=$?
  echo
  [ $RETVAL -eq 0 ] &amp;&amp; rm -f /var/lock/subsys/testclient
}</p>

<p>restart () {</p>

<pre><code>    stop
    start
</code></pre>

<p>}</p>

<h1>Send TERM signal to process and wait up to 300 seconds for process to go away.</h1>

<h1>If process is still alive after 300 seconds, send KILL signal.</h1>

<h1>Built-in killproc() (found in /etc/init.d/functions) is on certain versions of Linux</h1>

<h1>where it sleeps for the full $delay seconds if process does not respond fast enough to</h1>

<h1>the initial TERM signal.</h1>

<p>testclient_killproc()
{
  local pid_file=$1
  local procname=$2
  local -i delay=10
  local -i duration=1
  local pid=<code>pidofproc -p "${pid_file}" ${procname}</code></p>

<p>  kill -TERM $pid >/dev/null 2>&amp;1
  usleep 1000
  local -i x=0
  while [ $x -le $delay ] &amp;&amp; checkpid $pid; do</p>

<pre><code>sleep $duration
x=$(( $x + $duration))
</code></pre>

<p>  done</p>

<p>  kill -KILL $pid >/dev/null 2>&amp;1
  usleep 1000</p>

<p>  checkpid $pid # returns 0 only if the process exists
  local RC=$?
  [ &ldquo;$RC&rdquo; -eq 0 ] &amp;&amp; failure &ldquo;${procname} shutdown&rdquo; || rm -f &ldquo;${pid_file}&rdquo;; success &ldquo;${procname} shutdown&rdquo;
  RC=$((! $RC)) # invert return code so we return 0 when process is dead.
  return $RC
}</p>

<p>RETVAL=0</p>

<p>case &ldquo;$1&rdquo; in
  start)</p>

<pre><code>start
;;
</code></pre>

<p>  stop)</p>

<pre><code>stop
;;
</code></pre>

<p>  restart|reload|force-reload)</p>

<pre><code>restart
;;
</code></pre>

<p>  condrestart)</p>

<pre><code>[ -f $PIDFILEPATH] &amp;&amp; restart || :
;;
</code></pre>

<p>  status)</p>

<pre><code>status $testCLIENT
RETVAL=$?
;;
</code></pre>

<p>  *)</p>

<pre><code>echo "Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"
RETVAL=1
</code></pre>

<p>esac</p>

<p>exit $RETVAL
```</p>

<h2>systemd startup script template</h2>

<p>```
[config]
server = tcp://localhost:35555
node = 1
heartbeat_period = 5
port_sync_period = 10
config_period = 60
ovslog_filepath = /var/lib/helloworldtest/log/testovs.log
ovslog_maxbytes = 10485760</p>

<p>[system]
pidFilePath=/var/lib/helloworldtest/run/testclient.pid
logFilePath=/var/lib/helloworldtest/log/testclient.log
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Keep Environment Variables and PATH When Using SUDO]]></title>
    <link href="http://memoryboxes.github.io/blog/2016/06/02/how-to-keep-environment-variables-and-path-when-using-sudo/"/>
    <updated>2016-06-02T09:15:19+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2016/06/02/how-to-keep-environment-variables-and-path-when-using-sudo</id>
    <content type="html"><![CDATA[<h2>sudo tips</h2>

<h4>How to keep Environment Variables when Using SUDO</h4>

<p>The trick is to add environment variables to sudoers file via sudo visudo command and add these lines:</p>

<pre><code>Defaults env_keep += "HOME"
</code></pre>

<p>or and pay attention to the -E flag. This works:</p>

<pre><code>export HOME=/home/users/memorybox
sudo -E bash -c 'echo $HOME'
</code></pre>

<h4>How to keep PATH Variables when Using SUDO</h4>

<pre><code>vim /etc/sudoers
sed -i 's#Defaults    secure_path =.*#Defaults    secure_path =/usr/java/latest/bin/.....:#g' /etc/sudoers
</code></pre>

<h4>How to change root env</h4>

<pre><code>sudo -i
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crontab Eight Comm]]></title>
    <link href="http://memoryboxes.github.io/blog/2015/08/07/crontab-eight-comm/"/>
    <updated>2015-08-07T18:11:11+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2015/08/07/crontab-eight-comm</id>
    <content type="html"><![CDATA[<p>网上收集，多次踩坑，立此存照</p>

<h2>crontab八诫</h2>

<ul>
<li><p>不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下2点：</p>

<ul>
<li>脚本中涉及文件路径时写全局路径；</li>
<li><p>脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：</p>

<pre><code>  #!/bin/sh
  source /etc/profile
  export RUN_CONF=/home/xxxx/boss.conf
  /usr/local/jboss-4.0.5/bin/run.sh -c mev &amp;
</code></pre></li>
</ul>
</li>
<li><p>当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：</p>

<pre><code>  0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh
</code></pre></li>
<li><p>新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。</p></li>
<li><p>每条 JOB 执行完毕之后，系统会自动将输出发送邮件给当前系统用户。日积月累，非常的多，甚至会撑爆整个系统。所以每条 JOB 命令后面进行重定向处理是非常必要的: <code>&gt;/dev/null 2&gt;&amp;1</code>, 前提是对 Job 中的命令需要正常输出已经作了一定的处理, 比如追加到某个特定日志文件。</p></li>
<li><p>当crontab突然失效时，可以尝试<code>/etc/init.d/crond restart</code>解决问题。或者查看日志看某个job有没有执行/报错 <code>tail -f /var/log/cron</code>。</p></li>
<li><p>千万别乱运行 <code>crontab -r</code>。它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</p></li>
<li><p>在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义 <code>\%</code>，如经常用的<code>date '+%Y%m%d'</code>在crontab里是不会执行的，应该换成 <code>date '+\%Y\%m\%d'</code>。</p></li>
<li><p>永远要手工验证一下crontab中的命令</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Profile and Debug Tools of Performance]]></title>
    <link href="http://memoryboxes.github.io/blog/2015/06/28/linux-profile-and-debug-tools-of-performance/"/>
    <updated>2015-06-28T16:52:15+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2015/06/28/linux-profile-and-debug-tools-of-performance</id>
    <content type="html"><![CDATA[<h4>用perf工具统计系统调用</h4>

<p><code>
perf top
</code></p>

<p>或者统计一段时间内的调用</p>

<p><code>
perf record -a -g -F 1000 sleep 30
perf report -g
</code></p>

<h4>用strace 追踪某个进程的调用</h4>

<p><code>
strace -c ls
</code></p>

<p>或者attach一个进程</p>

<p><code>
strace -c -p pid
</code></p>

<h4>查看磁盘调用</h4>

<p><code>
lsof -p pid
</code></p>

<h4>磁盘负载</h4>

<p><code>
iostat -x 5 -m
</code></p>

<p>整体负载统计</p>

<p><code>
vmstat 5
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Cheat Sheet]]></title>
    <link href="http://memoryboxes.github.io/blog/2015/06/19/linux-cheat-sheet/"/>
    <updated>2015-06-19T09:43:07+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2015/06/19/linux-cheat-sheet</id>
    <content type="html"><![CDATA[<p>收集linux下需要多次google的命令</p>

<h2>编码问题</h2>

<ul>
<li>utf16 > utf8</li>
</ul>


<p><code>
iconv -f UTF-16 -t UTF-8 file_name
</code></p>

<h2>web开发命令</h2>

<ul>
<li>curl post 一个json文件</li>
</ul>


<p><code>
curl -H "Content-Type: application/json"--data @body.json http://localhost:8080/ui/webapp/conf
</code></p>

<ul>
<li>curl post 一个json字符串</li>
</ul>


<p><code>
curl -H "Content-Type: application/json"-d '{"username":"xyz","password":"xyz"}' http://localhost:3000/api/login
</code></p>

<h2>系统时间</h2>

<ul>
<li>centos6系列修改时区</li>
</ul>


<p><code>
ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
vim /etc/sysconfig/clock
ZONE="Asia/Shanghai"
</code></p>

<ul>
<li>centos7系列修改时区</li>
</ul>


<p><code>
timedatectl list-timezones | grep Asia
timedatectl set-timezone Asia/Shanghai
</code></p>

<ul>
<li>设置系统时间</li>
</ul>


<p><code>
date +"%Y%m%d%H%M%S"
</code></p>

<h2>系统状态</h2>

<ul>
<li>查看系统占用句柄数</li>
</ul>


<p><code>
lsof -n|awk '{print $2}'|sort|uniq -c|sort -nr|more
</code></p>

<h2>程序</h2>

<ul>
<li>mongo导出</li>
</ul>


<p><code>
mongoexport  -u crossflow -p '0701!1523#SH' -authenticationDatabase admin -d bpc -c main_app_datapath -o main_app_datapath.json
</code></p>

<h2>shell 处理</h2>

<ul>
<li>获取当前路径</li>
</ul>


<p><code>
export CURRENT_PATH=$(cd "$(dirname "$0")"; pwd)
</code></p>

<ul>
<li>检查CPU load</li>
</ul>


<p><code>
CURRENT_LOAD=`top -b -n 1|grep 'load average'|awk '{print $12}'|sed 's/,//'`
declare -i current_load=${CURRENT_LOAD%.*}
</code></p>

<ul>
<li>find 匹配多个pattern</li>
</ul>


<p><code>
find /usr/lib64 -name '*.so' -o -name '*.so.1'
</code></p>

<h2>文本处理</h2>

<ul>
<li>根据某个字段做uniq</li>
</ul>


<p><code>
sort -u -t, -k1 file
</code></p>
]]></content>
  </entry>
  
</feed>
