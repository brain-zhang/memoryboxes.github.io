<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[memoryboxes blog]]></title>
  <link href="http://memoryboxes.github.io/atom.xml" rel="self"/>
  <link href="http://memoryboxes.github.io/"/>
  <updated>2015-01-24T11:13:33+08:00</updated>
  <id>http://memoryboxes.github.io/</id>
  <author>
    <name><![CDATA[memoryboxes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Cheat]]></title>
    <link href="http://memoryboxes.github.io/blog/2015/01/17/git-cheat/"/>
    <updated>2015-01-17T11:45:03+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2015/01/17/git-cheat</id>
    <content type="html"><![CDATA[<p>整理一下经常忘记的Git命令</p>

<h1>remote 同步</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote -v                                                     // 查看当前远程版本库
</span><span class='line'>$ git remote add cocos2d-x git://github.com/cocos2d/cocos2d-x.git   // 添加原始版本库
</span><span class='line'>$ git fetch cocos2d-x                                               // 获取原始版本库的更新
</span><span class='line'>$ git merge cocos2d-x/master                                        // 合并原始版本库的代码到当前版本库中，合并前确保当前分支是master</span></code></pre></td></tr></table></div></figure>


<h1>remote branch</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git branch -a                                                     //查看所有分支
</span><span class='line'>$ git push origin --delete &lt;branchname&gt;                             //删除远程分支
</span><span class='line'>$ git push origin --delete tag &lt;tagname&gt;                            //删除远程tag
</span><span class='line'>$ git push origin :&lt;branchName&gt;                                     //推送一个空分支到远程分支，相当于删除分支
</span><span class='line'>$ git push origin :refs/tags/&lt;tagName&gt;                              //推送一个空tag到远程，相当于删除tag</span></code></pre></td></tr></table></div></figure>


<h2>删除不存在对应远程分支的本地分支</h2>

<p>假设这样一种情况：</p>

<ol>
<li>我创建了本地分支b1并pull到远程分支 origin/b1；</li>
<li>其他人在本地使用fetch或pull创建了本地的b1分支；</li>
<li>我删除了 origin/b1 远程分支；</li>
<li>其他人再次执行fetch或者pull并不会删除这个他们本地的 b1 分支，运行 git branch -a 也不能看出这个branch被删除了，如何处理？</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git fetch -p                                                        //在fetch之后删除掉没有与远程分支对应的本地分支</span></code></pre></td></tr></table></div></figure>


<h2>重命名远程分支</h2>

<p>在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push --delete origin devel                                    //删除远程分支
</span><span class='line'>$ git branch -m devel develop                                       //重命名本地分支
</span><span class='line'>$ git push origin develop                                           //推送本地分支</span></code></pre></td></tr></table></div></figure>


<h2>把本地tag推送到远程</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push --tags</span></code></pre></td></tr></table></div></figure>


<h2>获取远程tag</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git fetch origin tag &lt;tagname&gt;</span></code></pre></td></tr></table></div></figure>


<h2>分支的衍合</h2>

<p>参考:<a href="http://git-scm.com/docs/git-rebase">http://git-scm.com/docs/git-rebase</a></p>

<h1>diff</h1>

<p>只显示两个分支间的差异，如果你想找出‘master’,‘test’的共有 父分支和&#8217;test&#8217;分支之间的差异，你用3个‘.&lsquo;来取代前面的两个&rsquo;.&lsquo; 。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff master..test</span></code></pre></td></tr></table></div></figure>


<p>显示你当前的索引和上次提交间的差异；这些内容在不带&#8221;-a&#8221;参数运行 &ldquo;git commit&#8221;命令时就会被提交。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff --cached</span></code></pre></td></tr></table></div></figure>


<p>显示你工作目录与上次提交时之间的所有差别，这条命令所显示的 内容都会在执行&#8221;git commit -a&#8221;命令时被提交。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff HEAD</span></code></pre></td></tr></table></div></figure>


<p>如果你要查看当前的工作目录与另外一个分支的差别，你可以用下面的命令执行:
这会显示你当前工作目录与另外一个叫&#8217;test&#8217;分支的差别。你也以加上路径限定符，来只 比较某一个文件或目录。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff test</span></code></pre></td></tr></table></div></figure>


<p>显示你当前工作目录下的lib目录与上次提交之间的差别(或者更准确的 说是在当前分支)。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff HEAD -- ./lib</span></code></pre></td></tr></table></div></figure>


<p>如果不是查看每个文件的详细差别，而是统计一下有哪些文件被改动，有多少行被改 动，就可以使用‘&mdash;stat&#8217; 参数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff --stat</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript设计模式 - 笔记2]]></title>
    <link href="http://memoryboxes.github.io/blog/2015/01/05/javascriptshe-ji-mo-shi-2/"/>
    <updated>2015-01-05T09:05:16+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2015/01/05/javascriptshe-ji-mo-shi-2</id>
    <content type="html"><![CDATA[<h1>如何封装一个对象</h1>

<h2>门户大开型</h2>

<p>最简单的办法就是按传统方法创建一个类，用一个函数来做其构造器。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Book = function(isbn, title, author) {
</span><span class='line'>    if (isbn === undefined) {
</span><span class='line'>        throw new Error('Book constructor requires an isbn.');
</span><span class='line'>    }
</span><span class='line'>    this.isbn = isbn;
</span><span class='line'>    this.title = title || 'No title specified';
</span><span class='line'>    this.author = author || 'No title specified';
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//define by attr
</span><span class='line'>Book.prototype.display = function() {...};
</span><span class='line'>
</span><span class='line'>//define by object literals
</span><span class='line'>Book.prototype = {
</span><span class='line'>    display: function(){...},
</span><span class='line'>    checkIsdn: function(){...}
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<ul>
<li>优点：简单</li>
<li>缺点：没有保护，需要加各种校验。但内部的成员还是有很大可能被修改的。</li>
</ul>


<h2>语法修饰增强型</h2>

<p>用setattr,getattr等赋值取值方法及命名规范区别私有成员</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Book = function(isbn, title, author) {
</span><span class='line'>    if (isbn === undefined) {
</span><span class='line'>        throw new Error('Book constructor requires an isbn.');
</span><span class='line'>    }
</span><span class='line'>    this.setIsbn(isbn);
</span><span class='line'>    this.setTitle(title);
</span><span class='line'>    this.setAuthor(author);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//define by attr
</span><span class='line'>Book.prototype.display = function() {...};
</span><span class='line'>
</span><span class='line'>//define by object literals
</span><span class='line'>Book.prototype = {
</span><span class='line'>    _checkIsdn: function() {...}
</span><span class='line'>
</span><span class='line'>    setIsbn: function(isbn) {
</span><span class='line'>        if!(this._checkIsbn(isbn)) {
</span><span class='line'>            throw new Error("Invalid isbn");
</span><span class='line'>        }
</span><span class='line'>        this._isbn = isbn;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    getIsbn: function() {
</span><span class='line'>        return this._isbn;
</span><span class='line'>    }
</span><span class='line'>    .......
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<ul>
<li>优点：简单，安全性也有所增强</li>
<li>缺点：不是真正的私有成员，内部的成员还是有很大可能被修改的。</li>
</ul>


<h2>闭包实现私有成员</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Book = function(iisbn, ititle, iauthor) {
</span><span class='line'>
</span><span class='line'>    //private attributes
</span><span class='line'>    var isbn, title, author;
</span><span class='line'>
</span><span class='line'>    //private method
</span><span class='line'>    function _checkIsbn(iisbn) {
</span><span class='line'>        ...
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //privileged methods
</span><span class='line'>    this.getIsbn = function() {
</span><span class='line'>        return isbn;
</span><span class='line'>    };
</span><span class='line'>
</span><span class='line'>    this.setIsbn = function(iisbn) {
</span><span class='line'>        this._checkIsbn(iisbn) ...
</span><span class='line'>        isbn = iisbn;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    .......
</span><span class='line'>
</span><span class='line'>    //contructor code
</span><span class='line'>    this.setIsbn(iisbn);
</span><span class='line'>    this.setTitle(ititle);
</span><span class='line'>    this.setAuthor(iauthor);
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>//public, non-privileged methods
</span><span class='line'>
</span><span class='line'>Book.prototype = {
</span><span class='line'>    display: fucntion(){},
</span><span class='line'>    ....
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这里应用了js的闭包特性，isbn等属性不再通过<code>this</code>来引用，而是放到函数的构造器里面。既要访问到私有成员，又要对外的方法放到函数的构造中，对私有成员没有依赖的函数用prototype。</p>

<ul>
<li>优点：比较完整的模拟了private特性</li>
<li>缺点：private方法不再存在prototype里面，这样没生成一个新的对象实例都会为每个每个私有方法和特权方法生成一个新副本，耗费内存。</li>
</ul>


<h2>实现静态方法和属性</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Book = (function() {
</span><span class='line'>
</span><span class='line'>    //private static attributes
</span><span class='line'>    var numberOfBooks = 0;
</span><span class='line'>
</span><span class='line'>    //private static method
</span><span class='line'>    function checkIsbn(iisbn) {
</span><span class='line'>        ...
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //return the contructor
</span><span class='line'>    return function(iisbn, ititle, iauthor) {
</span><span class='line'>        //private attributes
</span><span class='line'>        var isbn, title, author;
</span><span class='line'>
</span><span class='line'>        //privileged methods
</span><span class='line'>        this.getIsbn = function() {
</span><span class='line'>            return isbn;
</span><span class='line'>        };
</span><span class='line'>
</span><span class='line'>        this.setIsbn = function(iisbn) {
</span><span class='line'>            this._checkIsbn(iisbn) ...
</span><span class='line'>            isbn = iisbn;
</span><span class='line'>        }
</span><span class='line'>        .......
</span><span class='line'>
</span><span class='line'>        //contructor code
</span><span class='line'>        numOfBooks++;
</span><span class='line'>        this.setIsbn(iisbn);
</span><span class='line'>    }
</span><span class='line'>})();
</span><span class='line'>
</span><span class='line'>//public, static methods
</span><span class='line'>Book.converTotitleCase = function(){...};
</span><span class='line'>
</span><span class='line'>//public, non-privileged methods
</span><span class='line'>
</span><span class='line'>Book.prototype = {
</span><span class='line'>    display: fucntion(){},
</span><span class='line'>    ....
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这里和<code>闭包实现私有成员</code>的区别就在于构造函数变成了一个内嵌函数，这样就创建了一个闭包，可以把静态的私有成员声明在最顶层。</p>

<h2>实现常量</h2>

<p>常量就设置为一个私有静态属性，用大写区分即可。我认为没有必要实现一个取值器去限制，用CONST前缀从代码风格上约束即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript设计模式 - 笔记1]]></title>
    <link href="http://memoryboxes.github.io/blog/2015/01/04/javascriptshe-ji-mo-shi-bi-ji-1/"/>
    <updated>2015-01-04T08:25:15+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2015/01/04/javascriptshe-ji-mo-shi-bi-ji-1</id>
    <content type="html"><![CDATA[<h1>富有表现力的javascript</h1>

<h2>弱类型语言</h2>

<p>javascript中有三种原始类型:布尔型、数值型(不区分浮点数和整数)和字符串型。</p>

<p>此外，还有对象类型和包含可执行代码的函数类型。前者是一种复合类型(数组是一种特殊的对象)。</p>

<p>最后，还有空类型(null)和未定义类型(undefined)。</p>

<p>原始数据类型按值传送，其他数据类型则按引用传送。</p>

<h2>函数是一等对象</h2>

<ul>
<li>匿名函数</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(function(){
</span><span class='line'>    var foo = 10;
</span><span class='line'>    var bar = 2;
</span><span class='line'>    alert(foo * bar);
</span><span class='line'>})();</span></code></pre></td></tr></table></div></figure>


<ul>
<li>闭包</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var baz;
</span><span class='line'>(function(){
</span><span class='line'>    var foo = 10;
</span><span class='line'>    var bar = 2;
</span><span class='line'>    baz = function(){
</span><span class='line'>        return foo * bar;
</span><span class='line'>    }
</span><span class='line'>})();
</span><span class='line'>baz(); //baz可以访问foo和bar，即使是在匿名函数外面执行</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>作用域、嵌套函数和闭包</p>

<ul>
<li><p>js中，只有函数具有作用域：</p>

<p>  在一个函数内部声明的变量，外部无法访问；
  定义在一个函数中的变量在该函数的内嵌函数中是可以访问的</p></li>
<li><p>js中的作用域是词法性的：</p>

<p>  函数运行在定义他们的作用域中，而不是调用他们的作用域中；
  可以利用这个特性定义静态方法和属性；</p></li>
</ul>
</li>
</ul>


<h2>对象的易变性(mutable)和内省(introspection)</h2>

<ul>
<li>易变性：js中可以对象前定义的类和实例化的对象进行修改</li>
<li>内省：js中可以在运行时检查对象所具有的属性和方法</li>
</ul>


<h1>接口</h1>

<ul>
<li><p>接口也是一种对象，判断一个类是否是实现了某类接口，就是传入这个接口，而后比较。</p>

<p>  java有专门的接口类，C++有虚基类，而C在linux kernel中的对象设计方法实际上也是一种接口实现，这都是接口在语言层面支持的体现</p></li>
<li><p>封装(encapsulation)和信息隐藏：信息隐藏是目的，而封装则是藉以达到这个目的的技术</p>

<p>  java和C++有 private关键字作为支持，Python有&#8217;__&lsquo;的命名约定，js中一般用闭包来模拟</p></li>
</ul>


<h2>接口实现</h2>

<h3>用注释来模拟</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'>interface Composite {
</span><span class='line'>    function add(child);
</span><span class='line'>    function remove(child);
</span><span class='line'>    ...
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>interface FormItem{
</span><span class='line'>    function save();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var CompositeForm = function(id, method, action) {
</span><span class='line'>    //implements Composite, FromItem
</span><span class='line'>    ...
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>CompositeForm.prototype.add = function(child) {
</span><span class='line'>    ...
</span><span class='line'>}
</span><span class='line'>CompositeForm.prototype.remove= function(child) {
</span><span class='line'>    ...
</span><span class='line'>}
</span><span class='line'>CompositeForm.prototype.save= function() {
</span><span class='line'>    ...
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>优点：简单明了，代码体积小</li>
<li>缺点：无法错误检查</li>
</ul>


<h3>用属性检查模仿接口</h3>

<p>约定所有类明确声明实现了那些接口，和这些类打交道的对象可以针对这些声明做检查。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'>interface Composite {
</span><span class='line'>    function add(child);
</span><span class='line'>    function remove(child);
</span><span class='line'>    ...
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>interface FormItem{
</span><span class='line'>    function save();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var CompositeForm = function(id, method, action) {
</span><span class='line'>    //implements Composite, FromItem
</span><span class='line'>    this.implementsInterfaces = ['Composite', 'FromItem'];
</span><span class='line'>    ...
</span><span class='line'>};
</span><span class='line'>    ...
</span><span class='line'>
</span><span class='line'>function addForm(formInstance) {
</span><span class='line'>    if (!implements(formInstance, 'Composite', 'FormItem')) {
</span><span class='line'>        throw new Error("object does not implement a required interface");
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>function implements(objects) {
</span><span class='line'>    for (var i = 1; i &lt; arguments.length; i++) {
</span><span class='line'>        var interfaceName = arguments[i];
</span><span class='line'>        var interfaceFound = false;
</span><span class='line'>        for (var j = 0; j &lt; object.implementsInterfaces[j] == interfaceName) {
</span><span class='line'>            interfaceFound = true;
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>        if (!interfaceFound) {
</span><span class='line'>            return false;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return true;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>优点:有错误检查</li>
<li>缺点:每次调用都要检查，啰嗦，另外防不住有说了实现但没有干活的</li>
</ul>


<h1>鸭式辨型模仿接口</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var Composite = new Intreface('Composite', ['add', 'remove']);
</span><span class='line'>var FormItem = new Interface('FormItem', ['save']);
</span><span class='line'>var CompositeForm = function(id, method, action) {
</span><span class='line'>    ...
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>function addForm(formInstance) {
</span><span class='line'>    ensureImplements(formInstance, Composite, FormItem);
</span><span class='line'>    ......
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var Interface = function(name, methods) {
</span><span class='line'>    if (arguments.length != 2) {
</span><span class='line'>        throw new Error("Interface constructor called with " + arguments.length + "arguments, but expected exactly 2.");
</span><span class='line'>    }
</span><span class='line'>    this.name = name;
</span><span class='line'>    this.methods = [];
</span><span class='line'>    for (var i = 0; len = methods.length; i &lt; len; i++) {
</span><span class='line'>        if (typeof methods[i] !== 'string')  {
</span><span class='line'>            throw new Error("Interface contructor expects method names to be " +
</span><span class='line'>                            "passed in as string");
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    this.methods.push(methods[i]);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>Interface.ensureImplements = function(object) {
</span><span class='line'>    if (arguments.length &lt; 2) {
</span><span class='line'>        throw Error("Functino Interface.ensureImplements called with " + arguments.length +
</span><span class='line'>                    "arguments, but expected at leaset 2.");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    for (var i = 1, len = arguments.length; i &lt; len; i++) {
</span><span class='line'>        if (interface.constructor !== Interface) {
</span><span class='line'>            throw new Error("Function Interface.ensureImplements expects arguments" +
</span><span class='line'>                            "two and above to be instances of Interface.");
</span><span class='line'>        } 
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    for (var j = 1, methodsLen = interface.methods.length; j &lt; methodsLen; j++) {
</span><span class='line'>        var method = interface.methods[j];
</span><span class='line'>        if(!object[method] || typeof object[method] !== 'function') {
</span><span class='line'>            throw new Error("Function Interface.ensureImplements: object " +
</span><span class='line'>                            "does not implement the " + interface.name)  +
</span><span class='line'>                            "interface.Method " + method + " was not found.");
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>优点：进一步加强了错误检查</li>
<li>缺点：增大了调试难度</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macvtap Ethernet Support Tcpdump]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/12/31/macvtap-ethernet-support-tcpdump/"/>
    <updated>2014-12-31T17:05:01+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/12/31/macvtap-ethernet-support-tcpdump</id>
    <content type="html"><![CDATA[<p>用macvtap模拟网卡时，用tcpdump抓包是抓不到的，后来发现3.14版本以上的内核修正了这一点。</p>

<p>参考这个提交:</p>

<p><a href="https://github.com/torvalds/linux/commit/6acf54f1cf0a6747bac9fea26f34cfc5a9029523">https://github.com/torvalds/linux/commit/6acf54f1cf0a6747bac9fea26f34cfc5a9029523</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux多网卡多路由设置]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/12/30/linuxshuang-wang-qia-shuang-lu-you-she-zhi/"/>
    <updated>2014-12-30T09:40:53+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/12/30/linuxshuang-wang-qia-shuang-lu-you-she-zhi</id>
    <content type="html"><![CDATA[<p>折腾了半天，原始出处不知道了，转记一下。</p>

<p>比如如果一个linux服务器有三个口接三个不同的网络，假设对应的网络信息是如此</p>

<ul>
<li><p>eth0是电信，ip地址为1.1.1.1/24，电信网关为1.1.1.254</p></li>
<li><p>eth1是网通，ip地址为2.2.2.2/24，网通网关为2.2.2.254</p></li>
<li><p>eth2是教育网，ip地址为3.3.3.3/24，教育网网关为3.3.3.254</p></li>
</ul>


<p>传统情况下，如果是为了从内向外访问获得更好的速度，让访问电信走电信，访问网通走网通，那么配置是网关只能够配置一个。</p>

<p>比如以电信为主的，那么网关就只设置电信的1.1.1.254，而针对网通和教育网设置不同的路由，路由下一跳指向网通和教育网对应的 网关。</p>

<p>如果这样做的目的只是实现内部访问外面，那么是没问题了，但是如果是为了让外面的用户能够正常访问到服务器上的服务就会出问题。比如电信用户会无法访问网通和教育网的ip，网通用户会无法访问电信和教育网的ip。</p>

<p>要解决这个问题，思路就是由哪个网口进来的流量希望全部就由哪个回去。用lartc里面提到的方法就是来源的口不同，走不同的路由表。在默认的路由表基础上再建立三个路由表。</p>

<p>用 ip route show 可以看到默认有local,main,default三个路由表，这三个路由表的名称命名来自 /etc/iproute2/rt_tables ，这里先在这个配置文件里面添加三个不同的路由表表名，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo “101 ChinaNet” &gt;&gt; /etc/iproute2/rt_tables
</span><span class='line'>echo ”102 ChinaCnc“ &gt;&gt; /etc/iproute2/rt_tables
</span><span class='line'>echo ”103 ChinaEdu“ &gt;&gt; /etc/iproute2/rt_tables</span></code></pre></td></tr></table></div></figure>


<p>之后建立这三个路由表的内容，因为这三个路由表的只是用来响应来自不同接口的，而不是用来相应从哪个接口出去的，所以只需要每个路由表里面建立默认网关即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ip route add default via 1.1.1.254 dev eth0 table ChinaNet
</span><span class='line'>ip route add default via 2.2.2.254 dev eth1 table ChinaCnc
</span><span class='line'>ip route add default via 3.3.3.254 dev eth2 table ChinaEdu</span></code></pre></td></tr></table></div></figure>


<p>之后再加上三条规则，使来自不同的口的走不同的路由表</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ip rule add from 1.1.1.1 table ChinaNet
</span><span class='line'>ip rule add from 2.2.2.2 table ChinaCnc
</span><span class='line'>ip rule add from 3.3.3.3 table ChinaEdu</span></code></pre></td></tr></table></div></figure>


<p>至此无论是电信还是网通还是教育网用户，访问三个ip的任意一个地址都能够连通了。即便是服务器上本身的默认路由都没有设置，也能够让外面的用户正常访问。</p>

<p>命令汇总：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ip route show
</span><span class='line'>
</span><span class='line'>echo “101 ChinaNet” &gt;&gt; /etc/iproute2/rt_tables
</span><span class='line'>echo ”102 ChinaCnc“ &gt;&gt; /etc/iproute2/rt_tables
</span><span class='line'>echo ”103 ChinaEdu“ &gt;&gt; /etc/iproute2/rt_tables // 这里也可以直接通过Vi编辑
</span><span class='line'>
</span><span class='line'>ip route add default via 1.1.1.254 dev eth0 table ChinaNet
</span><span class='line'>ip route add default via 2.2.2.254 dev eth1 table ChinaCnc
</span><span class='line'>ip route add default via 3.3.3.254 dev eth2 table ChinaEdu
</span><span class='line'>
</span><span class='line'>ip rule add from 1.1.1.1 table ChinaNet
</span><span class='line'>ip rule add from 2.2.2.2 table ChinaCnc
</span><span class='line'>ip rule add from 3.3.3.3 table ChinaEdu //如果用数字，可以不要上面的“echo”过程</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Libpcap PACKET_MMAP内存分配]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/12/25/libpcappacket-mmapnei-cun-fen-pei/"/>
    <updated>2014-12-25T10:03:49+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/12/25/libpcappacket-mmapnei-cun-fen-pei</id>
    <content type="html"><![CDATA[<p>libpcap为了提高效率，调用<code>setsockopt(handle-&gt;fd, SOL_PACKET, PACKET_RX_RING,(void *) &amp;req, sizeof(req))</code>时采用kmalloc分配内存。</p>

<p>可以参考:</p>

<p><a href="https://www.kernel.org/doc/Documentation/networking/packet_mmap.txt">https://www.kernel.org/doc/Documentation/networking/packet_mmap.txt</a></p>

<p>kmalloc底层依赖linux的slab内存分配机制，在2.6.22内核之后，slub取代slab成为默认的内存分配器。空间和时间上都有所提升。值得升级。</p>

<p>另外，centos5.9默认采用的2.6.18内核，编译的时候默认的KMALLOC_MAX_SIZE 设置为size-131072，这对于有很大内存的机器，分配效率是不高的。</p>

<p>最简单的办法就是用rpm包升级到2.6.33.9-rt31.86.el5rt，这个内核编译的时候已经将KMALLOC_MAX_SIZE设置为size-4194304。</p>

<p>这个问题是追踪libpcap的抓包程序，内存分配频繁失败发现的。</p>

<p>只能说，内核升级频繁，很多编译开关影响很大，要想全面发挥linux的性能，只能紧跟潮流啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker中的网络]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/12/08/dockerzhong-de-wang-luo/"/>
    <updated>2014-12-08T08:25:53+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/12/08/dockerzhong-de-wang-luo</id>
    <content type="html"><![CDATA[<p>Docker的默认网络是非常弱的，他使用的是一个虚拟网桥和container中的veth pair通信，在container中，默认是没有对外的IP的，外部主机或容器只能通过NAT，或者自定义iptable来实现主机或容器间的互联互通。
这种局限性非常明显:</p>

<ul>
<li><p>如果我要配置一个sshd service，需要手工配置转发规则，非常不便</p></li>
<li><p>无法使用DHCP</p></li>
<li><p>NAT无法在宿主机上用一个端口提供不同服务，所以有多个container绑定到一个物理网卡时，因为无法分配多个对外IP，所以诸如Http 这样的服务只能跑在同一IP的不同端口上。</p></li>
<li><p>在Container中无法正常tcpdump</p></li>
</ul>


<p>理想的容器内网卡应该像VMware的NSX那样，让你&#8217;基本上&#8217;感觉不到这是个虚拟的网卡，当然，这个和Docker的初衷有点不符了。但我们解决问题为先，工具是那一个，但不同人用法不同。</p>

<p>将Docker Container连接到本地网络，有四种搞法 (具体请参考:<a href="http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/">http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/</a>)，下面简单描述下:</p>

<ul>
<li>采用官方默认的搞法，用NAT:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ip addr add 10.12.0.117/21 dev em1
</span><span class='line'>
</span><span class='line'>docker run -d --name web -p 10.12.0.117:80:80 centos/simpleweb</span></code></pre></td></tr></table></div></figure>


<p>   这种方法简单，但也有上面所说的各种缺点</p>

<ul>
<li><p>建立自己的网桥和veth pair，为每个网桥分配一个IP，每个veth对绑定一个网桥，映射进docker容器，这样在容器内就得到了一个接近于真实的网卡。并且有能与本地网络的通信</p>

<p>  这种办法其实是对默认docker网络实现的一种升级，但是解决了原来的诸多局限，缺点是操作比较麻烦，另外容器内用tcpdump也会有问题</p></li>
<li><p>使用Open vSwitch Bridge，模拟第二种办法。</p>

<p>  这种方法就是用Open vSwitch简化了操作，但是又引入了一套东西。</p></li>
<li><p>建立macvlan虚拟网卡，容器启动后用nsenter工具映射到容器的network namespace中</p>

<p>  这种办法我觉得是最干净简洁的，而且采用macvlan，还意外获得了一种能力，就是你能在宿主机上创建子macvlan设备，从而能向容器内的macvlan设备打入精确的流量。
  采用这种方法得到的container，可以在里面启动sshd，远程ssh上去各种操作，这样使用同一般的虚拟机没有多大差别。
  另外，在容器内tcpdump包也很完美，如果想捕获二层协议包，可以用macvtap替换macvlan。</p></li>
</ul>


<p>需要注意的是，如果想要tcpdump macvtap，需要linux kernel 3.14以上的支持，参见<a href="https://github.com/torvalds/linux/commit/6acf54f1cf0a6747bac9fea26f34cfc5a9029523">这里</a>。</p>

<p>最后推荐为了简化macvlan的操作，我写的一个小工具:<a href="https://github.com/memoryboxes/dockerfly">dockerfly</a></p>

<p>参考:</p>

<ul>
<li>Linux 上的基础网络设备详解</li>
</ul>


<p><a href="http://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html">http://www.ibm.com/developerworks/cn/linux/1310_xiawc_networkdevice/index.html</a></p>

<ul>
<li>Linux 上虚拟网络与真实网络的映射</li>
</ul>


<p><a href="http://www.ibm.com/developerworks/cn/linux/1312_xiawc_linuxvirtnet/index.html">http://www.ibm.com/developerworks/cn/linux/1312_xiawc_linuxvirtnet/index.html</a></p>

<ul>
<li>网络虚拟化技术: TUN/TAP MACVLAN MACVTAP</li>
</ul>


<p><a href="https://blog.kghost.info/2013/03/27/linux-network-tun/">https://blog.kghost.info/2013/03/27/linux-network-tun/</a></p>

<ul>
<li>Coupling Docker and Open vSwitch</li>
</ul>


<p><a href="http://fbevmware.blogspot.com/2013/12/coupling-docker-and-open-vswitch.html">http://fbevmware.blogspot.com/2013/12/coupling-docker-and-open-vswitch.html</a></p>

<ul>
<li>four ways to connect a docker</li>
</ul>


<p><a href="http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/">http://blog.oddbit.com/2014/08/11/four-ways-to-connect-a-docker/</a></p>

<ul>
<li>Docker containers should not run an SSH server</li>
</ul>


<p><a href="https://news.ycombinator.com/item?id=7950326">https://news.ycombinator.com/item?id=7950326</a></p>

<ul>
<li>Proposal: Native Docker Multi-Host Networking</li>
</ul>


<p><a href="https://github.com/docker/docker/issues/8951">https://github.com/docker/docker/issues/8951</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多个git账号之间的切换]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/12/07/duo-ge-gitzhang-hao-zhi-jian-de-qie-huan/"/>
    <updated>2014-12-07T15:00:34+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/12/07/duo-ge-gitzhang-hao-zhi-jian-de-qie-huan</id>
    <content type="html"><![CDATA[<p>做过很多遍了，却总是记不住，这回从头来描述一下。</p>

<h1>介绍</h1>

<p>所谓多个git账号，可能有两种情况:</p>

<ul>
<li><p>我有多个github的账号，不同的账号对应不同的repo，需要push的时候自动区分账号</p></li>
<li><p>我有多个git的账号，有的是github的，有的是bitbucket的，有的是单位的gitlab的，不同账号对应不同的repo，需要push的时候自动区分账号</p></li>
</ul>


<p>这两种情况的处理方法是一样的，分下面几步走:</p>

<h1>处理</h1>

<ul>
<li><p>先假设我有两个账号，一个是github上的，一个是公司gitlab上面的。先为不同的账号生成不同的ssh-key</p>

<p>  <code>
      ssh-keygen -t rsa -f ~/.ssh/id_rsa_work -c xxx@gmail.com
 </code></p>

<p>  然后根据提示连续回车即可在~/.ssh目录下得到id_rsa_work和id_rsa_work.pub两个文件，id_rsa_work.pub文件里存放的就是我们要使用的key</p>

<p>  <code>
      ssh-keygen -t rsa -f ~/.ssh/id_rsa_github -c xxx@gmail.com
 </code></p>

<p>  然后根据提示连续回车即可在~/.ssh目录下得到id_rsa_github和id_rsa_github.pub两个文件，id_rsa_gthub.pub文件里存放的就是我们要使用的key</p></li>
<li><p>把id_rsa_xxx.pub中的key添加到github或gitlab上，这一步在github或gitlab上都有帮助，不再赘述</p></li>
<li><p>编辑 <code>~/.ssh/config</code>，设定不同的git 服务器对应不同的key</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Default github user(first@mail.com),注意User项直接填git，不用填在github的用户名
</span><span class='line'>Host github.com
</span><span class='line'> HostName github.com
</span><span class='line'> User git
</span><span class='line'> IdentityFile ~/.ssh/id_rsa_github
</span><span class='line'>
</span><span class='line'># second user(second@mail.com)
</span><span class='line'># 建一个gitlab别名，新建的帐号使用这个别名做克隆和更新
</span><span class='line'>Host 172.16.11.11
</span><span class='line'> HostName 172.16.11.11
</span><span class='line'> User work
</span><span class='line'> IdentityFile ~/.ssh/id_rsa_work</span></code></pre></td></tr></table></div></figure>


<p>编辑完成后可以使用命令 <code>ssh -vT git@github.com</code> 看看是不是采用了正确的id_rsa_github.pub文件</p>

<p>这样每次push的时候系统就会根据不同的仓库地址使用不同的账号提交了</p>

<ul>
<li>从上面一步可以看到，ssh区分账号，其实靠的是HostName这个字段，因此如果在github上有多个账号，很容易的可以把不同的账号映射到不同的HostName上就可以了。比如我有A和B两个账号， 先按照步骤一生成不同的key文件，再修改<code>~/.ssh/config</code> 内容应该是这样的。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Default github user(A@mail.com),注意User项直接填git，不用填在github的用户名
</span><span class='line'>Host A.github.com
</span><span class='line'> HostName github.com
</span><span class='line'> User git
</span><span class='line'> IdentityFile ~/.ssh/id_rsa_github_A
</span><span class='line'>
</span><span class='line'># second user(B@mail.com)
</span><span class='line'># 建一个gitlab别名，新建的帐号使用这个别名做克隆和更新
</span><span class='line'>Host A.github.com
</span><span class='line'> HostName github.com
</span><span class='line'> User git
</span><span class='line'> IdentityFile ~/.ssh/id_rsa_github_B</span></code></pre></td></tr></table></div></figure>


<p>同时你的github的repo ssh url就要做相应的修改了，比如根据上面的配置,原连接地址是:</p>

<pre><code>git@github.com:testA/gopkg.git
</code></pre>

<p>那么根据上面的配置，就要把<code>github.com</code>换成<code>A.github.com</code>, 那么ssh解析的时候就会自动把<code>testA.github.com</code> 转换为 <code>github.com</code>,修改后就是</p>

<pre><code>git@A.github.com:testA/gopkg.git
</code></pre>

<p>直接更改 <code>repo/.git/config</code> 里面的url即可</p>

<p>这样每次push的时候系统就会根据不同的仓库地址使用不同的账号提交了</p>

<h1>一些题外话</h1>

<h2>我有一个repo，想要同时push到不同的仓库该如何设置?</h2>

<p>很简单， 直接更改 <code>repo/.git/config</code> 里面的url即可，把里面对应tag下的url增加一个就可以了。例:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[remote "GitHub"]
</span><span class='line'>    url = git@github.com:elliottcable/Paws.o.git
</span><span class='line'>    fetch = +refs/heads/*:refs/remotes/GitHub/*
</span><span class='line'>[branch "Master"]
</span><span class='line'>    remote = GitHub
</span><span class='line'>    merge = refs/heads/Master
</span><span class='line'>[remote "Codaset"]
</span><span class='line'>    url = git@codaset.com:elliottcable/paws-o.git
</span><span class='line'>    fetch = +refs/heads/*:refs/remotes/Codaset/*
</span><span class='line'>[remote "Paws"]
</span><span class='line'>    url = git@github.com:Paws/Paws.o.git
</span><span class='line'>    fetch = +refs/heads/*:refs/remotes/Paws/*
</span><span class='line'>[remote "Origin"]
</span><span class='line'>    url = git@github.com:Paws/Paws.o.git
</span><span class='line'>    url = git@codaset.com:elliottcable/paws-o.git</span></code></pre></td></tr></table></div></figure>


<p>上面这个立即就是有4个远端仓库，不同的tag表示不同的远端仓库，最后的Origin标签写法表示默认push到github和codaset这两个远端仓库去。当然，你可以自己随意定制tag和url</p>

<h2>我有一个github的repo，clone没有问题，push的时候总是报错:error: The requested URL returned error: 403 while accessing xxx</h2>

<p>这个问题也困扰了我一段时间，后来发现修改 <code>repo/.git/config</code> 里面的url，把https地址替换为ssh就好了。</p>

<p>例如</p>

<pre><code>url=https://MichaelDrogalis@github.com/derekerdmann/lunch_call.git
</code></pre>

<p>替换为</p>

<pre><code>url=ssh://git@github.com/derekerdmann/lunch_call.git
</code></pre>

<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed">http://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed</a>
<a href="http://stackoverflow.com/questions/849308/pull-push-from-multiple-remote-locations/3195446#3195446">http://stackoverflow.com/questions/849308/pull-push-from-multiple-remote-locations/3195446#3195446</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[科技进步是安全行业的最根本保障]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/11/29/ke-ji-jin-bu-shi-an-quan-xing-ye-de-zui-gen-ben-bao-zhang/"/>
    <updated>2014-11-29T12:43:57+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/11/29/ke-ji-jin-bu-shi-an-quan-xing-ye-de-zui-gen-ben-bao-zhang</id>
    <content type="html"><![CDATA[<p>今天上网的时候突然发现有人邮件问什么是矿震。原来是知乎的注册号职业还是煤矿行业，知乎还是挺智能的~~~</p>

<p>查了一下，辽宁那又有矿难了,矿震引起煤尘爆炸。唉&hellip;&hellip;</p>

<p>什么是矿震呢，矿上有叫岩裂的，有叫岩震的，说法不一。书上的说法是冲击地压。通俗点就是地底下挖空了，巷道两侧岩石受不了压力，就压裂塌陷了。</p>

<p>我是没遇见过，矿上听过一些老师傅讲岩裂的时候，最可怕的是两侧的石子像子弹一样弹出来，人在那个时候是没什么办法的，趴在地上逃过一劫，一般高瓦斯的矿也会引发爆炸之类的事故，这个时候就听老天爷的了。</p>

<p>又胡思乱想了很多事情。</p>

<p>我刚入行，到各个煤矿下过一些井的时候，有很多不明白的事。那时候我一边看书上的一些矿压理论，一边在井下看实际的生产，发现了很多可以改进的地方。比如离层监控，直接顶垮塌预警，还有支护距离、支护强度的选择~~~
这些事情都是有现有理论支撑的，很多情况下找几位真正懂行的专家来，做好规划和基础建设，后期是能省下很多气力的，生产也能安全的多。</p>

<p>那个时候，我用很幼稚的办法写着一个支护专家系统，想着可以用电脑帮助预测离层压力，该如何选型液压支柱等，还想着要是有个论坛，供全国的煤矿从业者交流经验，提炼知识就好了。</p>

<p>后来，我又下了一段时间的井，有一个很心凉的发现或想法，现在也不能摆脱:</p>

<p>那就是，人命也许不是那么值钱，无论是在他人眼里，或是在自己眼里。</p>

<p>我记得那时候外来人员，像我这样的厂家人员下井，一般会买20几万的地险，我至今也没有去查过之前从业的公司有没有给我买工伤保险，有点可笑是不。可事实就是这样，在山东很多小县城，正规给工人交齐保险的小工厂几乎没有，相比下，富士康其实已经是非常良心的企业了。即使企业按最低标准给你交齐各种保险(这家企业还能正常运转)，你换工作，流动到其他地方后，这些钱大部分还是要孝敬当地政府的，而且那点钱再转到外地还不够跑腿的功夫。可能一些工作稳定，长期在一个地方生活的人体会不多。但是当我辗转几个地方后，就发现交类似养老保险这种事无论对企业还是工人都是非常不划算的。</p>

<p>所以在很多地方，工人和工厂心照不宣，在没有保障的前提下尽量活着。</p>

<p>事实上，无论是工厂还是工人自己，对自己的命值多少钱，估量的数字都少得可怜。在非常好的条件下，一个青壮年在井下挂了，能得到的赔偿我估计就在30-40万之间。而且这还是&#8221;毛利&#8221;，为了得到这笔赔偿你还要杂七杂八的各种打点开销。这个估算就是以山西国有大矿为参照，像甘肃那样年产40万吨的小矿就不说了。</p>

<p>但更令我惊奇的是，甘肃那样的小矿，井下条件反而比山西的大矿好得多，井口的巷道会贴瓷砖，会有很明亮的灯，下井的工人也比大矿的工人心情更宽松。虽然硬件设施比不上人家财大气粗，但软件上的很多小细节都很贴心。</p>

<p>后来我明白了，就是西边的老矿区，一般还是把人当人来看的，说的不好听些，你真的埋在井下了，虽然赔的钱比不上大矿，但一般还有人情世故，给你家其他人安排个矿上清闲活，家里也有矿上的左邻右舍照顾着，这就是我们老派国企的作风。
像山西很多大矿，我觉得是市场化和国有企业的奇怪混合体。工人的价值，管理制度，硬件建设，都市场化了；说白了，就是这个投入下去，要比你的命便宜，就投，你的命贱，就不投。但煤炭销售，利润分配，还是要国家来管。</p>

<p>有很多瞎扯的专家讲这个制度，那个管理。似乎每次事故出来都是管理问题，制度问题&hellip;&hellip;不错，肯定是管理问题，制度问题。但是，我下井的时候，干活很累的时候，不止一次想过:就是现在顶塌了，也无所谓。
人在极累的时候，什么也顾不上的。这是人不可克服的弱点。当工人连自己性命也轻忽的时候，你和他讲这个管理，那个制度，专家们，敢到井下去讲讲吗。</p>

<p>管理当然很重要，后来我觉得，安全行业最根本的保障在于科技进步。只有人远离危险的时候，才有闲情谈管理，谈制度。</p>

<p>听新闻说中国已经成为全世界最大的机器人消费市场，非常高兴。</p>

<p>有人说会有下岗，会有就业萎缩。</p>

<p>我只想问:人命有贵贱吗?人命有价格吗?</p>

<p>如果你不想回答这种无聊的问题，就不要再对更无聊的问题评头论足了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pycon2014 in Shanghai]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/11/16/pycon2017-in-shanghai/"/>
    <updated>2014-11-16T12:19:21+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/11/16/pycon2017-in-shanghai</id>
    <content type="html"><![CDATA[<p>今年又去打酱油了。在上海有这点好处，可以很方便的找到各种组织~~~</p>

<p>去年拿了个帽子，今年发了件T恤，明年来条短裤就套装啦。</p>

<p>这次Pycon非常赞，上海的组织者真用心，这次无论是演讲还是气氛都很到位。志愿者们真的辛苦了，十二分的敬礼。</p>

<p>讲的内容有几点让我很惊艳的:</p>

<ul>
<li><p>讲协程的时候提到，函数的返回值不必返回给调用者，可以返回给三方，很有启发</p></li>
<li><p>黄冬老师讲测试3层设备或者网站性能的最好办法，是把一段时间的DDOS发包抓下来，或者造出一堆SYN，直接用tcpreplay打到目标机上。很好很粗暴，也很有效</p></li>
<li><p>关于OpenCL在数据计算领域的应用，让我有点吃惊，已经这么易用了，回头要看看</p></li>
<li><p>以前一直听人说postgresql怎么怎么好，这次又被强化了一遍，这个也要研究研究</p></li>
<li><p>中间看到有演讲者调试程序用lldb，之前我一直以为它不靠谱，貌似已经很成熟了</p></li>
<li><p>机器学习讲的简洁明了，让我这个门外汉也听得津津有味</p></li>
<li><p>中间的台湾演讲同五地互动的创举，太有想法了，虽然效果不理想，但我想说太Cool了，未来的大会互动会更多元，更精彩，为这个尝试鼓掌</p></li>
<li><p>主持人非常专业，聪敏又风趣，可以直接上央视啦</p></li>
</ul>


<p>还有几点不足的:</p>

<ul>
<li><p>话筒时好时不好，这个估计让大家有点提心吊胆的。这个是经验啊，以后组织类似的活动话筒要多多益善，还要多备电池。</p></li>
<li><p>Django和创业的两个议题都有点浅，太多讲Python的ABC了，这方面的内容可以收缩下</p></li>
</ul>


<p>另外有点Confuse，会上有人提到用libpcap抓包分析网络流的，黄冬老师说性能没问题。其实我们这测试下来，绑定CPU抓包，libpcap通常的性能就在单网卡400Mbps左右。
如果用Zero Copy的话，可能性能有提升，但也不会太高。目前抓流量效率最好的是Intel的DPDK，可以到10Gbps。</p>

<p>还有魔豆提到用Selenium做自动化测试的事情，我用Selenium觉得，他的适用场景在WEB UI很少变化，并且页面结构简单的企业软件，像传统的路由器管理界面这样的东西，用它的录制测试还是可以的。
但是界面稍微个性化一些，想让测试代码长久，必须手写代码，而且是简单可靠的代码，不能单纯追求覆盖率。Selenium的测试代码虽然好写，但也容易废弃，要想写的简单可靠还是很有难度的。</p>

<p>关于UI测试，我的想法就是，尽量降低编写成本，如果一个UI测试挂了，你不能在5分钟之内修复它，直接丢弃掉！编写UI自动化测试的成本不应该超过5分钟，如果一个测试要频繁维护，那么，是重新写一个的时候了。
要想达到这个目标，我想到的简单解决方案就是图像DIFF，facebook之前出过一个huxley，我很有兴趣的研究过，还PULL过代码，但这个东西还是离我心目中的自动化图像DIFF有距离。后来又自己写了一个能把每天的测试结果保存下来，并能基于时间查看对比的东东，但效果也不好。</p>

<p>我想象中的web UI自动测试是这样的:</p>

<ul>
<li><p>支持比较模板点自定义</p>

<p>  对比的截图可以是基于录制时间最早的case的，如果中途重新录制，提供用户自定义机制。</p></li>
<li><p>支持时间轴功能</p>

<p>  1、查询时间范围的灵活选择，可以很简洁的查询某段时间、或某个时间点的case.</p>

<p>  2、可以在时间轴上直接修改比较模板的base时间点</p>

<p>  3、以不同颜色标识base时间点、pass的测试、fail的测试以及fail的个数，测试名称等</p></li>
<li><p>比较智能的图像DIFF算法:</p>

<p>  1、首先要能忽略指定区域，因为有些区域能够预测到是不断变化的。</p>

<p>  2、能对整张图、或某几个区域提供多个选择，如果符合其中一个我们就认为是OK的</p>

<p>  3、能提供组件级的识别，比如某个button，某个搜索框等等，一张截图里面如果所有指定的组件都OK，我们就认为是OK的。</p></li>
</ul>


<p>最后感概下，Pycon一年比一年进步，志愿者们功不可没。对于他们的工作，怎么赞誉都不过分。非常感谢!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用TCP/IP进行网际互连 (笔记)]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/11/05/yong-tcp-slash-ipjin-xing-wang-ji-hu-lian-bi-ji/"/>
    <updated>2014-11-05T08:19:18+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/11/05/yong-tcp-slash-ipjin-xing-wang-ji-hu-lian-bi-ji</id>
    <content type="html"><![CDATA[<p>还是要补习基础知识啊。</p>

<p>譬如TCP的状态机转换，我每次都得花很长很长的时间才能反应过来什么时候会进入TIME_WAIT,CLOSE_WAIT&hellip;.</p>

<p>譬如一个pcap包，看了很长很长时间才发现是个规避糊涂窗口的Nagle算法&hellip;</p>

<p>譬如这本书，每次扫一遍好像都能知道怎么回事，过了段时间就又雾里看花了&hellip;.</p>

<p>这次通读一遍，又发现一些有意思的东西，记一下:</p>

<h3>底层网络技术回顾</h3>

<ul>
<li><p>最初的电话系统是面向连接的电路交换，后期(就是现在)的IP网络是基于分组交换的</p>

<p>  讲起来很简单，实际上为了实现分组交换网上的通信质量达到电路直接交换的效果，还是要付出很大努力，才能克服时延、抖动、通信质量等多个问题</p></li>
<li><p>以太网容量</p>

<p>  当前以太网不是为一对计算机之间提供可能的最高吞吐率而优化的，而是为更多网点介入和更多通信总量优化的。当前10G以太网的帧长度和格式还是保持10M网的标准，从这方面看，10G以太网在物理层的协议上还是有优化余地的。</p></li>
<li><p>POE可以提供48V,不超过15.4W的功率消耗，这个数字还是挺可观的</p></li>
<li><p>关于以太网的一些特点</p>

<p>  CSMA/CD 是很简单但有效的手段，值得后来的分布式系统借鉴</p>

<p>  以太网在物理层上只是&#8221;尽最大努力交付(best effort delivery)&ldquo;，但如果碰到问题，错误不会得到通知，数据包会丢弃</p>

<p>  frame帧大小 64B~1518B</p>

<p>  线缆的集合造就集线器，集线器升级为连接任意多的以太网就变成网桥，网桥提供自适应的帧转发，这样任意多的以太网就集合为一个物理网络，他们也遵循CSMA/CD。网桥提供更完善的隔离和配置方案就变成了交换机。</p>

<p>  以太网的地址(MAC)是要向IEEE买的</p>

<p>  以太网基础上升级为WIFI就有了两个很重要的技能:</p>

<pre><code>* 可作为接入点基站
* 可作为接入点连接(点对点),也就是WI-MAX
</code></pre></li>
</ul>


<h3>网际互联的模型</h3>

<ul>
<li><p>路由器的工作，某种情况下和DHT很相似，不过实现的约束更多一些</p></li>
<li><p>定向广播地址，主机号都为1</p></li>
<li><p>受限广播地址，255.255.255.255 (本地子网广播)</p></li>
<li><p>0.0.0.0有时候也用于广播，这是早期BSD实现的一个bug。后来有些软件为了兼容，也这么实现了。</p></li>
<li><p>0.0.0.0 表示无路由目标，有些应用把绑定这个的设置，认为是绑定全部本地IP。类似于一些设置中，设为0就相当于该项设置无限制。</p></li>
<li><p>127.0.0.1 是本地环回地址, 专供自己访问自己, 速度大( 不用经过整个协议栈 )</p></li>
<li><p>地址管理早期是由<a href="https://www.iana.org/about">IANA</a> 管理的，早期的IANA地址维护者仅仅是一个人,<a href="http://en.wikipedia.org/wiki/Jon_Postel">Jon Postel</a>，这位传奇人物在1998年过世，后来IANA成长为更完善的组织，ICANN是也,目前由ICANN管理地址相关分配工作。</p></li>
<li><p>IBM的地址段是9.0.0.0，AT&amp;T的地址段是12.0.0.0</p></li>
</ul>


<h3>ARP</h3>

<ul>
<li>没什么好讲的了，这个是最熟悉的</li>
</ul>


<h3>无连接网络</h3>

<pre><code>* 错误会被丢弃!!!

* IP报文已经包含了源-目的地址

* 分片控制

* 优先级

* 校验和

* 路由信息和时间戳
</code></pre>

<h3>ICMP</h3>

<ul>
<li>最好和Ping结合起来学习</li>
</ul>


<p>最后，读这本书后面的应用层也很好玩，能延伸想象很多东西，比如现在Linux下虚拟网卡的实现，Vmware如何虚拟物理网卡的，还有早期浩方上如果实现虚拟局域网的，很多原来看起来Magic的东西，其实原理很简单，平时多想想会很有趣。</p>

<p>从TCP/IP的设计来看，我们的网络应用还是停留在很&#8221;初级&#8221;的阶段，还没有完全发挥出他的潜力。未来肯定还会出现像P2P软件这样神奇的颠覆者，TCP/IP所承载的流量也会一次次变化，如果把TCP/IP比作海的话，不知道下一位弄潮儿是谁。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uwsgi部署django程序]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/10/31/uwsgibu-shu-djangocheng-xu/"/>
    <updated>2014-10-31T08:39:26+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/10/31/uwsgibu-shu-djangocheng-xu</id>
    <content type="html"><![CDATA[<p>Python的web世界，部署首选uwsgi，既可独战，又可搭配Nginx等车轮战，实在是居家必备。</p>

<p>但我每次都得搞都得去翻一遍手册，实在烦了，记一下简单粗暴的测试方案。</p>

<h2>安装</h2>

<pre><code>pip install uwsgi
</code></pre>

<h2>测试</h2>

<p>写一个最简单的test.py:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># test.pydef application(env, start_response):
</span><span class='line'>    start_response('200 OK', [('Content-Type','text/html')])
</span><span class='line'>    return "Hello World"</span></code></pre></td></tr></table></div></figure>


<p>执行shell命令:</p>

<pre><code>uwsgi --http :8000 --wsgi-file test.py
</code></pre>

<p>访问:</p>

<p><a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a></p>

<p>因该能看到<code>Hello World</code>了</p>

<h2>集成Django</h2>

<pre><code>django-admin startproject testuwsgi
</code></pre>

<p>这样生成的项目，django版本不同，目录会有微小的差别，找manage.py就对了</p>

<p>如果是>django1.6的话，会自动生成wsgi.py文件，没有的话编辑一个:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env python
</span><span class='line'># coding: utf-8
</span><span class='line'>
</span><span class='line'>import os
</span><span class='line'>import sys
</span><span class='line'>
</span><span class='line'># 将系统的编码设置为UTF8
</span><span class='line'>reload(sys)
</span><span class='line'>sys.setdefaultencoding('utf8')
</span><span class='line'>
</span><span class='line'>os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings")
</span><span class='line'>
</span><span class='line'>from django.core.handlers.wsgi import WSGIHandler
</span><span class='line'>application = WSGIHandler()</span></code></pre></td></tr></table></div></figure>


<p>执行:</p>

<pre><code>uwsgi --http :8000 --chdir xxxxx/testuwsgi --module testuwsgi.wsgi
</code></pre>

<p>访问:</p>

<p><a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a></p>

<p>因该能看到Django的欢迎页面了</p>

<h2>支持Https</h2>

<p>uwsgi自1.3版本开始支持https</p>

<p>分两步走:</p>

<h4>生成证书</h4>

<pre><code>openssl genrsa -out foobar.key 2048
openssl req -new -key foobar.key -out foobar.csr
openssl x509 -req -days 365 -in foobar.csr -signkey foobar.key -out foobar.crt
</code></pre>

<h4>走起</h4>

<pre><code>uwsgi --master --https 0.0.0.0:8443,foobar.crt,foobar.key --chdir xxxxx/testuwsgi --module testuwsgi.wsgi
</code></pre>

<p>访问的时候要以:</p>

<p><a href="https://127.0.0.1:8443/">https://127.0.0.1:8443/</a></p>

<p>OK了</p>

<p>至于怎么搭配Nginx，写配置文件，搭配Supervisor，还是老老实实翻手册吧，反正这个不是经常做。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Auto Gen Css/js by Grunt and Jenkins]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/10/29/how-to-auto-gen-css-slash-js-by-grunt-and-jenkins/"/>
    <updated>2014-10-29T12:16:15+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/10/29/how-to-auto-gen-css-slash-js-by-grunt-and-jenkins</id>
    <content type="html"><![CDATA[<p>虽然有<a href="https://github.com/gruntjs/grunt-contrib-watch">grunt-contrib-watch</a>的存在，但多个人编辑同一份css/js代码时，还要操心编译这个事，实在是多余。</p>

<p>想到的最直接的办法就是jenkins上开一个项目，自动编译一把，再自动提交:</p>

<p>虽然是野路子，但效果那是杠杠的。</p>

<p>记一下一些要注意的点:</p>

<ul>
<li>有时候自动编译会失败，需要标记一下:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/node-v0.10.20-linux-x64/bin/grunt --force |tee $PWD_DIR/grunt.log
</span><span class='line'>err_count=`grep 'Error' $PWD_DIR/*.log|wc -l`
</span><span class='line'>fail_count=`grep 'failed' *.log|wc -l`
</span><span class='line'>abort_count=`grep 'Aborting' *.log|wc -l`
</span><span class='line'>if [[ $err_count -gt 0 || $fail_count -gt 0 || $abort_count -gt 0 ]]; then
</span><span class='line'>    exit 1
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>这样jenkins编译失败，就会标红了</p>

<ul>
<li>还有个坑，有时候新增加了一个js的代码目录，这样编译后也会多一个目录，这就需要svn每次提交的时候，不要忘了强制add一下当前所有目录:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn add static/dist/ --force</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最后，极少数的情况编译后会出现冲突，因为编译的时候有人同样编译了一把提交了，这样自动提交会失败，也需要标记一下:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svn ci --no-auth-cache --username=xxx --password=xxx static/dist/* -m "jenkins:auto grunt" 2&gt;&1| tee $PWD_DIR/svn.log
</span><span class='line'>err_count=`grep 'Error' $PWD_DIR/*.log|wc -l`
</span><span class='line'>fail_count=`grep 'failed' *.log|wc -l`
</span><span class='line'>abort_count=`grep 'Aborting' *.log|wc -l`
</span><span class='line'>if [[ $err_count -gt 0 || $fail_count -gt 0 || $abort_count -gt 0 ]]; then
</span><span class='line'>    exit 1
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>这样基本上看看jenkins的状态，或是让jenkins自动发发邮件，就舒心了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Compile by Autotools]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/10/29/how-to-compile-by-autotools/"/>
    <updated>2014-10-29T12:12:30+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/10/29/how-to-compile-by-autotools</id>
    <content type="html"><![CDATA[<p>虽然因为llvm的出现，开源工具链又开始慢慢进化了，但是很多项目还是需要autotools自动gen configure的，但是我每次命令都记不全，还是记一下吧</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>echo "Running aclocal..."
</span><span class='line'>aclocal || exit 1
</span><span class='line'>echo "Running autoheader..."
</span><span class='line'>autoheader || exit 1
</span><span class='line'>echo "Running autoconf..."
</span><span class='line'>autoconf || exit 1
</span><span class='line'>echo "Running automake..."
</span><span class='line'>automake --add-missing --copy || exit 1
</span><span class='line'>echo "Finished."</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown Raw Format]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/09/18/markdown-raw-format/"/>
    <updated>2014-09-18T14:21:04+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/09/18/markdown-raw-format</id>
    <content type="html"><![CDATA[<p>有时候想要在Markdwon里面画ASCII画，会被Format掉，例如:</p>

<table>
<thead>
<tr>
<th></th>
<th>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>  &mdash;&mdash;&mdash;    &mdash;&mdash;&mdash;&ndash; |</td>
</tr>
<tr>
<td></td>
<td>                    |</td>
</tr>
<tr>
<td></td>
<td>     \        /     |</td>
</tr>
<tr>
<td></td>
<td>      &mdash;&mdash;&mdash;&ndash;/      |</td>
</tr>
<tr>
<td></td>
<td>                    |</td>
</tr>
</tbody>
</table>


<p>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+</p>

<p>这个时候可以用缩进来解决:</p>

<pre><code>|--------------------+
|                    |
|  ------    ------- |
|                    |
|     \        /     |
|      -------/      |
|                    |
+--------------------+
</code></pre>

<p>参考:
<a href="https://meta.stackexchange.com/questions/177133/turn-off-markdown-formatting/177135#177135?newreg=acda653c863843a99d1008c464864262">https://meta.stackexchange.com/questions/177133/turn-off-markdown-formatting/177135#177135?newreg=acda653c863843a99d1008c464864262</a></p>

<p>引发了一点兴趣，meta.stackexchange.com上面有个测试语法专贴，各种乱搞洋洋大观:</p>

<p><a href="http://meta.stackexchange.com/questions/3122/formatting-sandbox/43134#43134">http://meta.stackexchange.com/questions/3122/formatting-sandbox/43134#43134</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Cheat Sheet]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/09/18/docker-cheat-sheet/"/>
    <updated>2014-09-18T09:09:52+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/09/18/docker-cheat-sheet</id>
    <content type="html"><![CDATA[<h4>Container</h4>

<pre><code>* `docker run` creates a container

* 待续
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python2.x：Error When Printing an Exception Containing a Unicode String]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/09/17/python2-dot-x%3Aerror-when-printing-an-exception-containing-a-unicode-string/"/>
    <updated>2014-09-17T08:43:39+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/09/17/python2-dot-x:error-when-printing-an-exception-containing-a-unicode-string</id>
    <content type="html"><![CDATA[<p>Python2.x中抛出Unicode的异常需要注意:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; try:
</span><span class='line'>...     raise Exception(u'Error when printing 中文异常')
</span><span class='line'>... except Exception, e:
</span><span class='line'>...     print e
</span><span class='line'>...     print str(e)</span></code></pre></td></tr></table></div></figure>


<p>会报UnicodeEncodeError: &lsquo;ascii&rsquo; codec can&rsquo;t encode character &hellip;</p>

<p>同样，如果在log中直接输出，也会报错</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import logging
</span><span class='line'>    logger = logging.getLogger('default')
</span><span class='line'>    try:
</span><span class='line'>...     raise Exception(u'Error when printing 中文异常')
</span><span class='line'>... except Exception, e:
</span><span class='line'>...     logger.error(e)
</span><span class='line'>...     logger.error("%s", e)
</span><span class='line'>...     logger.error("%s", str(e))</span></code></pre></td></tr></table></div></figure>


<p>简单的解决办法就是用e.message</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; try:
</span><span class='line'>...     raise Exception(u'Error when printing 中文异常')
</span><span class='line'>... except Exception, e:
</span><span class='line'>...     print e.message
</span><span class='line'>...     print "%s" % e.message</span></code></pre></td></tr></table></div></figure>


<p>也可以详细的可以指定encoder</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; try:
</span><span class='line'>...     raise Exception(u'Error when printing 中文异常')
</span><span class='line'>... except Exception, e:
</span><span class='line'>...     print unicode(e.message).encode('utf-8')</span></code></pre></td></tr></table></div></figure>


<p>Python3就没这个事了，备忘一下。</p>

<p>参考:</p>

<p><a href="http://bugs.python.org/issue2517">http://bugs.python.org/issue2517</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C:dynamic Array in Stack]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/09/17/c-dynamic-array-in-stack/"/>
    <updated>2014-09-17T08:42:25+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/09/17/c-dynamic-array-in-stack</id>
    <content type="html"><![CDATA[<p>以前一直认为C99 只支持const int 定义数组，今天才学到C99里面是支持动态数组的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>    int x = 12;
</span><span class='line'>    char pz[x];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>C99是支持的。在gcc4+以上的版本里测试OK。</p>

<p>另外stackoverflow上提到C++不支持动态数组，在g++4.4.7里面试了一下，也是可以的。</p>

<p>不是我不明白，这世界变化快。</p>

<p>Out好多好多年了…….</p>

<p>参考:
<a href="http://stackoverflow.com/questions/1204521/dynamic-array-in-stack">http://stackoverflow.com/questions/1204521/dynamic-array-in-stack</a> <a href="http://stackoverflow.com/questions/737240/c-c-array-size-at-run-time-w-o-dynamic-allocation-is-allowed">http://stackoverflow.com/questions/737240/c-c-array-size-at-run-time-w-o-dynamic-allocation-is-allowed</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[svn1.7+ Zsh报错]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/09/17/svn1-dot-7-plus-zshbao-cuo/"/>
    <updated>2014-09-17T08:40:14+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/09/17/svn1-dot-7-plus-zshbao-cuo</id>
    <content type="html"><![CDATA[<p>更新svn(subversion)>1.7后 zsh 的svn自动完成会报错。</p>

<p><code>_arguments:comparguments:312: invalid argument: [--cl]:arg:</code></p>

<p>修改方法:</p>

<p>打开文件：/usr/share/zsh/4.3.11/functions/_subversion</p>

<p>找到35行左右</p>

<p><code>${=${${${(M)${(f)"$(LC_ALL=C _call_program options svn help $cmd)"#(*Valid options:|(#e))}:#* :*}%% #:*}/ (arg|ARG)/:arg:}/(#b)-([[:alpha:]]) \[--([a-z-]##)\](:arg:)#/(--$match[2])-    $match[1]$match[3] (-$match[1])--$match[2]$match[3]}</code>
改为</p>

<p><code>${=${${${(M)${(f)"$(LC_ALL=C _call_program options svn help $cmd)"#(*Valid options:|(#e))}:#* :*}%% #:*}/ (arg|ARG)/:arg:}/(#b)(-##)([[:alpha:]]##) \[--([a-z-]##)\](:arg:)#/(--$match[3])$match[1]$match[2]$match[4] ($match[1]$match[2])--$match[3]$match[4]}</code></p>

<p>参考资料：
<a href="http://www.zsh.org/mla/workers/2011/msg01448.html">http://www.zsh.org/mla/workers/2011/msg01448.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义Django的密码策略]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/09/17/zi-ding-yi-djangode-mi-ma-ce-lue/"/>
    <updated>2014-09-17T08:38:03+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/09/17/zi-ding-yi-djangode-mi-ma-ce-lue</id>
    <content type="html"><![CDATA[<p>Django 从1.4 版本开始，包含了一些安全方面的重要提升。其中一个是使用 PBKDF2 密码加密算法代替了 SHA1 。另外一个特性是你可以添加自己的密码加密方法。</p>

<p>Django 会使用你提供的第一个密码加密方法（在你的 setting.py 文件里要至少有一个方法）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PASSWORD_HASHERS = (
</span><span class='line'>    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
</span><span class='line'>    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
</span><span class='line'>    'django.contrib.auth.hashers.BCryptPasswordHasher',
</span><span class='line'>    'django.contrib.auth.hashers.SHA1PasswordHasher', # Insecure Hashes
</span><span class='line'>    'django.contrib.auth.hashers.MD5PasswordHasher', # Insecure Hashes
</span><span class='line'>    'django.contrib.auth.hashers.CryptPasswordHasher', # Insecure Hashes
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>但Django默认生成的密码策略往往会带上 md5_xxx, pbkdf2_xxx，同其他系统整合的时候，一般是没有这些前缀的，这就需要我们自定义一个密码策略。</p>

<p>下面介绍下如何定义一个简单的 <code>md5(md5(password, salt))</code> 密码策略。</p>

<h3>step1</h3>

<p>建立一个app，django-admin.py startapp ownmd5</p>

<h3>step2</h3>

<p>在 ownmd5中 建立 hashers.py 文件，加入 OwnMd5PasswordHasher 类</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import hashlib
</span><span class='line'>from django.utils.translation import ugettext_noop as _
</span><span class='line'>from django.utils.datastructures import SortedDict
</span><span class='line'>from django.utils.crypto import constant_time_compare
</span><span class='line'>from django.utils.encoding import force_bytes, force_str, force_text
</span><span class='line'>from django.contrib.auth.hashers import BasePasswordHasher, mask_hash
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>class OwnMD5PasswordHasher(BasePasswordHasher):
</span><span class='line'>    """
</span><span class='line'>    The Salted MD5 password hashing algorithm (not recommended)
</span><span class='line'>    """
</span><span class='line'>    algorithm = "ownmd5"
</span><span class='line'>
</span><span class='line'>    def encode(self, password, salt):
</span><span class='line'>        assert password is not None
</span><span class='line'>        assert salt and '$' not in salt
</span><span class='line'>        hash = hashlib.md5(hashlib.md5(force_bytes(salt + password)).hexdigest()).hexdigest()
</span><span class='line'>        return hash
</span><span class='line'>
</span><span class='line'>    def verify(self, password, encoded, salt):
</span><span class='line'>        encoded_2 = self.encode(password, salt)
</span><span class='line'>        return constant_time_compare(encoded, encoded_2)
</span><span class='line'>
</span><span class='line'>    def safe_summary(self, encoded, salt):
</span><span class='line'>        return SortedDict([
</span><span class='line'>            (_('algorithm'), self.algorithm),
</span><span class='line'>            (_('salt'), mask_hash(salt, show=4)),
</span><span class='line'>            (_('hash'), mask_hash(hash)),
</span><span class='line'>        ])</span></code></pre></td></tr></table></div></figure>


<h3>step3</h3>

<p>将 OwnMD5PasswordHasher 加入到settings.py 中:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PASSWORD_HASHERS = (
</span><span class='line'>    'ownmd5.hashers.OwnMD5PasswordHasher',
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>这样，默认的user及auth模块都会采用自定义的md5算法。</p>

<p>参考:</p>

<p><a href="https://docs.djangoproject.com/en/1.6/topics/auth/passwords/">https://docs.djangoproject.com/en/1.6/topics/auth/passwords/</a></p>
]]></content>
  </entry>
  
</feed>
