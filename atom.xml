<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[memoryboxes blog]]></title>
  <link href="http://memoryboxes.github.io/atom.xml" rel="self"/>
  <link href="http://memoryboxes.github.io/"/>
  <updated>2014-09-16T10:53:28+08:00</updated>
  <id>http://memoryboxes.github.io/</id>
  <author>
    <name><![CDATA[memoryboxes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从MongoDB迁移到TokuMx]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/09/16/cong-mongodbqian-yi-dao-tokumx/"/>
    <updated>2014-09-16T08:36:30+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/09/16/cong-mongodbqian-yi-dao-tokumx</id>
    <content type="html"><![CDATA[<h2>WHY:</h2>

<p>原因无它，MongoDB的 BSON格式带来的磁盘空间消耗实在太严重了,将mongodb的数据库文件gzip一把，一般能到原大小的1/10。</p>

<h3>mongodb提出的解决办法有以下几个:</h3>

<h4><a href="http://docs.mongodb.org/manual/reference/method/db.repairDatabase/">定期repaire或Compact</a>，但是repaire带来的性能消耗实在太大，repaire或compact的时候插入性能基本上就是渣了，另外100G级别的数据库文件需要数小时才能压缩完毕。</h4>

<h4>采用<a href="http://docs.mongodb.org/manual/core/capped-collections/">Capped Collections</a>，这样在创建collections的时候可以指定数据库文件能占用的最大空间大小及单个document大小，当存储数据超过这个大小的时候会自动删除最老的数据，空出空间来。但这样做弊端就是你不知道会有多少数据被删掉，另外需要你对这个表插入的document大小心中有数。</h4>

<h4>建立自己的清理机制，定期把无用的数据清理出去。这样虽然比Capped Collections可控制，但是对删除掉的磁盘空间利用率进一步下降了，很多时候，你删掉一半数据，能重新利用的空间可能也就10%。这是由MongoDB对于单个Document的空间分配机制决定的。</h4>

<h4>最后一种方法就是合理规划，分库分表，然后在mongodb.conf里面设置选项:<code>directoryperdb = true</code>，这样mongo每个数据库都会建立一个文件夹,这样删除单库的时候数据文件就删干净了，空间自然清理出来了，这个选项我强烈推荐打开，即使你没有空间上的困扰，打开后也对数据库管理维护由不小的方便。当然指望这种办法删数据局限性就太大了。</h4>

<p>详细说一下mongo对于删除空间的重新利用方法:</p>

<p>1.首先mongodb删除一个document的时候并不是物理上真正删除数据，而是维护一个deleteList链表数组，每次删除就在链表里面做一个标记。怎么表示这次删除的空间大小范围呢,如图示:</p>

<pre><code>        ---------------------------------------
</code></pre>



<pre><code>        ---------------------------------------
         |       |      |     |     |      |
         |       |      |     |     |      |
        +-+     +-+     +-+   +-+   +-+    +-+
        +-+     +-+     +-+   +-+   +-+    +-+
                +-+     +-+   +-+   +-+    +-+
                        +-+   +-+   +-+    +-+
</code></pre>

<p>2.对每一个被删除的docment计算其大小，然后插入到合适的链表中去，这样下次插入新数据的时候，先计算合适的空间大小，再在这个链表数组中找到合适的空闲空间指针地址，插入数据。如果没有合适的，再去开辟新空间。</p>

<p>3.这个链表数组每个大小区间是代码里写死的，可参见<code>namespace_detail.h</code>:
<code>int bucketSizes[] = { 32, 64, 128, 256, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000, 0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000,0x400000, 0x800000};</code></p>

<p>那么插入一条新的docement时，如何计算这个合适的空间分配大小就要斟酌了。mongo采取两种办法，选择哪一种可以在创建collection的时候指定:</p>

<p>1.Padding计算方式，这也是mongodb默认的方式。每次开辟空间的时候，采用公式 <code>实际大小*(1+paddingFactor)</code>，这个 paddingFactor一般比较小，在0.01-1之间，是根据插入document的大小自动变化的。可以在mongodb的shell里用<code>db.stats()</code>查看这个值。另外，repaire会把这个值置为1，compact操作可以手工指定这个值。</p>

<p>2.采用<a href="http://docs.mongodb.org/manual/reference/command/collMod/">usePowerOf2Size</a>方式,这种方式和mongodb的磁盘空间分配比较相像，就是以2<sup>2</sup>, 2<sup>3</sup>, 2<sup>4</sup>&hellip;.大小增长，每次分配相近的空间大小</p>

<p>网上有人评价道:这两种方式各有优劣，padding方式会为文档开辟更合适的大小，而且paddingFactor比较小，一般为0.01-0.09，不会浪费空间，文档更新小的话也不会移动文档位置。但是当大量更新和删除的时候，这种方式重复利用空间的能力就比较小，因为在deleteList中，不太容易找到合适的已删除文档，而且一旦更新就会又移动位置，磁盘重复利用率低，增长快，碎片多。相比之下，usePowerOf2Size方式，Mongodb每次都会开辟比文档大的多的空间，使用空间变多，但是更新和删除的容错率就会比较高，因为在deleteList列表中更容易找到合适的删除文档（每个列表中的文档大小都是相同的固定的），更新的时候也不会大量移动位置，磁盘重复利用率高，增长慢。</p>

<h4>看起来这些策略很靠谱，但我实际用起来两种方法其实效果都不好，另外usePowerOf2Size的表现好一些，mongodb自2.6开始把这种分配方式变成默认的了。</h4>

<h4>啰嗦了半天，我想说的就是, mongodb的存储受他的MMap内存管理所限，改来改去利用率没有本质提升。</h4>

<h2>How to do?</h2>

<h3>升级Tokumx</h3>

<h4>看看Tokumx的介绍:&ldquo;TokuMX is the MongoDB you know and love but built on top of Fractal Tree indexes from Tokutek.&rdquo;</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Export Json by Mongoexport]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/07/03/wei-cexport-json-by-mongoexport/"/>
    <updated>2014-07-03T08:46:23+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/07/03/wei-cexport-json-by-mongoexport</id>
    <content type="html"><![CDATA[<p>Exp:</p>

<pre><code>mongoexport -d foo -c exp -o exp.json -q '{"ts":{"$gte":0}}'
</code></pre>

<p>Notice:</p>

<pre><code>You should use `"`  not  `'` in query string
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freeze Svn:externals for Tags/branch]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/03/26/freeze-svn-externals-for-tags/"/>
    <updated>2014-03-26T18:12:23+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/03/26/freeze-svn-externals-for-tags</id>
    <content type="html"><![CDATA[<p>svn的external link在多个项目互相引用时很有用。</p>

<p>但我们想要做tag及branch的时候，需要将external link的文件或目录固定在某个版本。</p>

<h2>搜了一下，基本上有几个办法:</h2>

<pre><code>* 使用tortoisesvn&gt;1.7版本，打tag及branch的时候可以固定在某一版本:



¦   http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-branchtag.html



缺点是这样打出来的branch，checkout下来后，svn up还是回到最新的版本。



* 使用一个perl脚本，可以在打branch的时候把extern link一起拷贝到branch底下，这样相当于是建立了一个新的external link拷贝，修改branch不会影响到trunk



¦   https://svn.apache.org/repos/asf/subversion/trunk/contrib/client-side/svncopy/



缺点是这样打出来的branch底下会多出来external link的拷贝，不完美。



* 有人开发了工具, C#的，但我在win7下面打branch的时候会报错



¦   http://svnxf.codeplex.com/
</code></pre>

<h4>原先以为这样的事情总该有个simple的解决办法的，但还真是没找到，自己实际写个脚本想做这个事情才发现不简单。想要做这件事的前提是要把代码check到本地来，这样就不如直接调命令了，如果远程操作svn库，就需要三方开发。</h4>

<h2>最后简单的办法是:</h2>

<pre><code>* 如果是打tag，采用方法一，用tortoisesvn固定在一个版本

* 如果是打branch，先用tortoisesvn 固定在一个版本，再把branch分支checkout下来，用命令 `svn propedit svn:externals .`取消external link，再重新加入版本库，最后提交。
</code></pre>

<p>参考:</p>

<pre><code>http://stackoverflow.com/questions/1982538/how-to-have-tortoisesvn-always-freeze-svnexternals-for-tags
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为centos添加EPEL Repo]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/03/14/wei-centostian-jia-epel-repo/"/>
    <updated>2014-03-14T11:04:58+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/03/14/wei-centostian-jia-epel-repo</id>
    <content type="html"><![CDATA[<p>centos默认的源软件不是很全，大部分时候需要添加EPEL源。</p>

<h2>centos5.x</h2>

<pre><code>wget http://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm
wget http://rpms.famillecollet.com/enterprise/remi-release-5.rpm
sudo rpm -Uvh remi-release-5*.rpm epel-release-5*.rpm
</code></pre>

<h2>centos6.x</h2>

<pre><code>wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
sudo rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm
</code></pre>

<h2>添加完毕后可以到/etc/yum.repos.d里面看一下</h2>

<pre><code>$ ls -1 /etc/yum.repos.d/epel* /etc/yum.repos.d/remi.repo
/etc/yum.repos.d/epel.repo
/etc/yum.repos.d/epel-testing.repo
/etc/yum.repos.d/remi.repo
</code></pre>

<h2>设置remi repository</h2>

<p>remi repository更新很快，如果你很需要htopxxx最新版本这样的话最好打开</p>

<pre><code>sudo vim /etc/yum.repos.d/remi.repo
</code></pre>

<p>编辑 [remi]段:</p>

<pre><code>name=Les RPM de remi pour Enterprise Linux $releasever - $basearch
#baseurl=http://rpms.famillecollet.com/enterprise/$releasever/remi/$basearch/
mirrorlist=http://rpms.famillecollet.com/enterprise/$releasever/remi/mirror
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-remi
failovermethod=priority
</code></pre>

<h2>解决仓库安装失败的问题</h2>

<p>有时候某个软件可以Search，但安装一直报错:</p>

<pre><code>http://download.fedoraproject.org/pu...ry.sqlite.bz2: [Errno 12] Timeout: &lt;urlopen error timed out&gt;
Trying other mirror.
</code></pre>

<p>最简单的修复办法就是重建repos</p>

<pre><code>yum clean all
rpm --rebuilddb
yum update
</code></pre>

<p>90%的情况会奏效</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[批量删除mongo Collections]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/02/27/pi-liang-shan-chu-mongo-collections/"/>
    <updated>2014-02-27T09:24:04+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/02/27/pi-liang-shan-chu-mongo-collections</id>
    <content type="html"><![CDATA[<p>mongodb没有批量删除collecton的命令，平常建立了很多a1,a2,a3的表删除有些麻烦，写个小脚本方便些。</p>

<pre><code>mongorm.sh -d database -c a*
</code></pre>

<p>就很方便删除了。</p>

<div><script src='https://gist.github.com/9242308.js'></script>
<noscript><pre><code>#!/bin/bash
# remove mongodb&#39;s collections with command &quot;mongn rm app*&quot;
# Usage `mongorm &lt;-c collections*&gt; &lt;-d dababase&gt;`

E_BADARGS=85
E_NOFILE=86

DATABASE=&#39;&#39;
COLLECTIONS=&#39;&#39;

while getopts &quot;c:d:h&quot; arg
do
        case $arg in
             c)
                echo &quot;-c $OPTARG&quot;
                COLLECTIONS=$OPTARG
                ;;
             d)
                echo &quot;-d $OPTARG&quot;
                DATABASE=$OPTARG
                ;;
             h)
                 echo &quot;mongorm &lt;-d database&gt; &lt;-c collections&gt;&quot;
                 echo &quot;for exp:&quot;
                 echo &quot;        mongorm -d bpc -c app*&quot;
                 ;;
             ?)
                echo &quot;unkonw argument&quot;
        exit 1
        ;;
        esac
done

if [[ -z &quot;$DATABASE&quot; ]]
    # Correct number of arguments passed to script?
then
    echo &#39;Usage: -d database&#39;
    echo &#39;please do mongorm.sh -h to get more info&#39;
    exit $E_BADARGS
fi

if [[ -z &quot;$COLLECTIONS&quot; ]]
    # Correct number of arguments passed to script?
then
    echo &#39;Usage: -c collections&#39;
    echo &#39;please do mongorm.sh -h to get more info&#39;
    exit $E_BADARGS
fi

mongojs_rm_function=`cat &lt;&lt; EOF
db.getCollectionNames().forEach(function(c) {
    if(c.match(&quot;$COLLECTIONS&quot;)) {
                db.getCollection(c).drop();
                    }
                  });
EOF
`
echo $mongojs_rm_function&gt;remove.js

mongo 127.0.0.1:27017/$DATABASE remove.js
rm -rf remove.js </code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决tmux下vim Colorscheme失效的问题]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/02/25/jie-jue-tmuxxia-vim-colorschemeshi-xiao-de-wen-ti/"/>
    <updated>2014-02-25T08:05:48+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/02/25/jie-jue-tmuxxia-vim-colorschemeshi-xiao-de-wen-ti</id>
    <content type="html"><![CDATA[<p>在tmux(v1.6)默认配置下，vim的主题solarized, molokai等颜色设置都会失效</p>

<p>这是由于tmux term设置的问题。</p>

<p>需要在~/.bashrc中添加:
<code>alias tmux="TERM=screen-256color-bce tmux"</code></p>

<p>再在~/.tmux.conf中添加:
<code>set -g default-terminal "xterm"</code></p>

<p>如果是osx，可能在~/.bashrc要添加:
<code>alias tmux="TERM=screen-256color-bce tmux"</code></p>

<p>在~/.tmux.conf中添加:
<code>set -g default-terminal "screen-256color"</code></p>

<p>最后执行
<code>$ source ~/.bashrc</code></p>

<p>就OK了。</p>

<p>参考:</p>

<p><a href="http://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode">http://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode</a>
<a href="http://rhnh.net/2011/08/20/vim-and-tmux-on-osx">http://rhnh.net/2011/08/20/vim-and-tmux-on-osx</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[双梦记]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/02/22/shuang-meng-ji/"/>
    <updated>2014-02-22T16:45:16+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/02/22/shuang-meng-ji</id>
    <content type="html"><![CDATA[<p>阿拉伯历史学家艾尔一伊萨基叙说了下面的故事：</p>

<p>“据可靠人士说（不过唯有真主才是无所不知、无所不能、慈悲为怀、明察秋毫的），开罗有个家资巨万的人，他仗义疏财，散尽家产，只剩下祖传的房屋，不得不干活糊口。他工作十分辛苦，一晚累得在他园子里的无花果树下睡着了，他梦见一个衣服湿透的人从嘴里掏出一枚金币，对他说：‘你的好运在波斯的伊斯法罕；去找吧。’他第二天清晨醒来后便踏上漫长的旅程，经受了沙漠、海洋、海盗、偶像崇拜者、河流、猛兽和人的磨难艰险。他终于到达伊斯法罕，刚进城天色已晚，便在一座清真寺的天井里躺着过夜。清真寺旁边有一家民宅，由于万能的神的安排，一伙强盗借道清真寺，闯进民宅，睡梦中的人被强盗的喧闹吵醒，高声呼救。邻舍也呼喊起来，该区巡夜士兵的队长赶来，强盗们便翻过屋顶逃跑。队长吩咐搜查寺院，发现了从开罗来的人，士兵们用竹杖把他打得死去活来。两天后，他在监狱里苏醒。队长把他提去审问：‘你是谁，从哪里来？’那人回道：‘我来自有名的城市开罗，我名叫穆罕默德一艾尔一马格莱比。’队长追问：‘你来波斯干什么？’那人如实说：‘有个人托梦给我，叫我来伊斯法罕，说我的好运在这里。如今我到了伊斯法罕，发现答应我的好运却是你劈头盖脸给我的一顿好打。’</p>

<p>“队长听了这番话，笑得大牙都露了出来，最后说：‘鲁莽轻信的人啊，我三次梦见开罗城的一所房子，房子后面有个日晷，日晷后面有棵无花果树，无花果树后面有个喷泉，喷泉底下埋着宝藏。我根本不信那个乱梦。而你这个骡子与魔鬼生的傻瓜啊，居然相信一个梦，跑了这么多城市。别让我在伊斯法罕再见到你了。拿几枚钱币走吧。’</p>

<p>“那人拿了钱，回到自己的国家，他在自家园子的喷泉底下（也就是队长梦见的地点）挖出了宝藏。神用这种方式保佑了他，给了他好报和祝福。在冥冥中主宰一切的神是慷慨的。”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/02/22/hello/"/>
    <updated>2014-02-22T15:45:34+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/02/22/hello</id>
    <content type="html"><![CDATA[<p>Seashore washed by suds and foam,</p>

<p>Been here so long got to calling it home．</p>

<p>let&rsquo;s sail.</p>
]]></content>
  </entry>
  
</feed>
