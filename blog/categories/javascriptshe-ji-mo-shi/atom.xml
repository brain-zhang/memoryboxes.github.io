<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript设计模式 | memoryboxes blog]]></title>
  <link href="http://memoryboxes.github.io/blog/categories/javascriptshe-ji-mo-shi/atom.xml" rel="self"/>
  <link href="http://memoryboxes.github.io/"/>
  <updated>2015-01-04T09:21:27+08:00</updated>
  <id>http://memoryboxes.github.io/</id>
  <author>
    <name><![CDATA[memoryboxes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript设计模式 - 笔记1]]></title>
    <link href="http://memoryboxes.github.io/blog/2015/01/04/javascriptshe-ji-mo-shi-bi-ji-1/"/>
    <updated>2015-01-04T08:25:15+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2015/01/04/javascriptshe-ji-mo-shi-bi-ji-1</id>
    <content type="html"><![CDATA[<p>javascript设计模式 (读书笔记1)</p>

<h1>富有表现力的javascript</h1>

<h2>弱类型语言</h2>

<p>javascript中有三种原始类型:布尔型、数值型(不区分浮点数和整数)和字符串型。</p>

<p>此外，还有对象类型和包含可执行代码的函数类型。前者是一种复合类型(数组是一种特殊的对象)。</p>

<p>最后，还有空类型(null)和未定义类型(undefined)。</p>

<p>原始数据类型按值传送，其他数据类型则按引用传送。</p>

<h2>函数是一等对象</h2>

<ul>
<li>匿名函数</li>
</ul>


<p>```
(function(){</p>

<pre><code>var foo = 10;
var bar = 2;
alert(foo * bar);
</code></pre>

<p>})();
```</p>

<ul>
<li>闭包</li>
</ul>


<p>```
var baz;
(function(){</p>

<pre><code>var foo = 10;
var bar = 2;
baz = function(){
    return foo * bar;
}
</code></pre>

<p>})();
baz(); //baz可以访问foo和bar，即使是在匿名函数外面执行
```</p>

<ul>
<li><p>作用域、嵌套函数和闭包</p>

<ul>
<li><p>js中，只有函数具有作用域：</p>

<p>  在一个函数内部声明的变量，外部无法访问；</p>

<p>  定义在一个函数中的变量在该函数的内嵌函数中是可以访问的</p></li>
<li><p>js中的作用域是词法性的：</p>

<p>  函数运行在定义他们的作用域中，而不是调用他们的作用域中；</p>

<p>  可以利用这个特性定义静态方法和属性；</p></li>
</ul>
</li>
</ul>


<h2>对象的易变性(mutable)和内省(introspection)</h2>

<ul>
<li><p>易变性：js中可以对象前定义的类和实例化的对象进行修改</p></li>
<li><p>内省：js中可以在运行时检查对象所具有的属性和方法</p></li>
</ul>


<h1>接口</h1>

<ul>
<li><p>接口也是一种对象，判断一个类是否是实现了某类接口，就是传入这个接口，而后比较。</p>

<p>  java有专门的接口类，C++有虚基类，而C在linux kernel中的对象设计方法实际上也是一种接口实现，这都是接口在语言层面支持的体现</p></li>
<li><p>封装(encapsulation)和信息隐藏：信息隐藏是目的，而封装则是藉以达到这个目的的技术</p>

<p>  java和C++有 private关键字作为支持，Python有'__&lsquo;的命名约定，js中一般用闭包来模拟</p></li>
</ul>


<h2>接口实现</h2>

<h3>用注释来模拟</h3>

<p>```
/*
interface Composite {</p>

<pre><code>function add(child);
function remove(child);
...
</code></pre>

<p>}</p>

<p>interface FormItem{</p>

<pre><code>function save();
</code></pre>

<p>}</p>

<p>var CompositeForm = function(id, method, action) {</p>

<pre><code>//implements Composite, FromItem
...
</code></pre>

<p>};</p>

<p>CompositeForm.prototype.add = function(child) {</p>

<pre><code>...
</code></pre>

<p>}
CompositeForm.prototype.remove= function(child) {</p>

<pre><code>...
</code></pre>

<p>}
CompositeForm.prototype.save= function() {</p>

<pre><code>...
</code></pre>

<p>}</p>

<p>```</p>

<ul>
<li><p>优点：简单明了，代码体积小</p></li>
<li><p>缺点：无法错误检查</p></li>
</ul>


<h3>用属性检查模仿接口</h3>

<p>约定所有类明确声明实现了那些接口，和这些类打交道的对象可以针对这些声明做检查。</p>

<p>```
/*
interface Composite {</p>

<pre><code>function add(child);
function remove(child);
...
</code></pre>

<p>}</p>

<p>interface FormItem{</p>

<pre><code>function save();
</code></pre>

<p>}</p>

<p>var CompositeForm = function(id, method, action) {</p>

<pre><code>//implements Composite, FromItem
this.implementsInterfaces = ['Composite', 'FromItem'];
...
</code></pre>

<p>};</p>

<p>CompositeForm.prototype.add = function(child) {</p>

<pre><code>...
</code></pre>

<p>}
CompositeForm.prototype.remove= function(child) {</p>

<pre><code>...
</code></pre>

<p>}
CompositeForm.prototype.save= function() {</p>

<pre><code>...
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
