<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | memoryboxes blog]]></title>
  <link href="http://memoryboxes.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://memoryboxes.github.io/"/>
  <updated>2015-04-28T07:48:33+08:00</updated>
  <id>http://memoryboxes.github.io/</id>
  <author>
    <name><![CDATA[memoryboxes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Cheat]]></title>
    <link href="http://memoryboxes.github.io/blog/2015/01/17/git-cheat/"/>
    <updated>2015-01-17T11:45:03+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2015/01/17/git-cheat</id>
    <content type="html"><![CDATA[<p>整理一下经常忘记的Git命令</p>

<h1>remote 同步</h1>

<p><code>
$ git remote -v                                                     // 查看当前远程版本库
$ git remote add cocos2d-x git://github.com/cocos2d/cocos2d-x.git   // 添加原始版本库
$ git fetch cocos2d-x                                               // 获取原始版本库的更新
$ git merge cocos2d-x/master                                        // 合并原始版本库的代码到当前版本库中，合并前确保当前分支是master
</code></p>

<h1>remote branch</h1>

<p><code>
$ git branch -a                                                     //查看所有分支
$ git checkout -b branches/xxx origin/branches/xxx                  //chekcout远程分支
$ git push origin --delete &lt;branchname&gt;                             //删除远程分支
$ git push origin --delete tag &lt;tagname&gt;                            //删除远程tag
$ git push origin :&lt;branchName&gt;                                     //推送一个空分支到远程分支，相当于删除分支
$ git push origin :refs/tags/&lt;tagName&gt;                              //推送一个空tag到远程，相当于删除tag
</code></p>

<h2>删除不存在对应远程分支的本地分支</h2>

<p>假设这样一种情况：</p>

<ol>
<li>我创建了本地分支b1并pull到远程分支 origin/b1；</li>
<li>其他人在本地使用fetch或pull创建了本地的b1分支；</li>
<li>我删除了 origin/b1 远程分支；</li>
<li>其他人再次执行fetch或者pull并不会删除这个他们本地的 b1 分支，运行 git branch -a 也不能看出这个branch被删除了，如何处理？</li>
</ol>


<p><code>
git fetch -p                                                        //在fetch之后删除掉没有与远程分支对应的本地分支
</code></p>

<h2>重命名远程分支</h2>

<p>在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支</p>

<p><code>
$ git push --delete origin devel                                    //删除远程分支
$ git branch -m devel develop                                       //重命名本地分支
$ git push origin develop                                           //推送本地分支
</code></p>

<h2>把本地tag推送到远程</h2>

<p><code>
$ git push --tags
</code></p>

<h2>获取远程tag</h2>

<p><code>
$ git fetch origin tag &lt;tagname&gt;
</code></p>

<h2>分支的衍合</h2>

<p>参考:<a href="http://git-scm.com/docs/git-rebase">http://git-scm.com/docs/git-rebase</a></p>

<h1>diff</h1>

<p>只显示两个分支间的差异，如果你想找出‘master’,‘test’的共有 父分支和'test'分支之间的差异，你用3个‘.&lsquo;来取代前面的两个&rsquo;.&lsquo; 。</p>

<p><code>
$ git diff master..test
</code></p>

<p>显示你当前的索引和上次提交间的差异；这些内容在不带"-a"参数运行 &ldquo;git commit"命令时就会被提交。</p>

<p><code>
$ git diff --cached
</code></p>

<p>显示你工作目录与上次提交时之间的所有差别，这条命令所显示的 内容都会在执行"git commit -a"命令时被提交。</p>

<p><code>
$ git diff HEAD
</code></p>

<p>如果你要查看当前的工作目录与另外一个分支的差别，你可以用下面的命令执行:
这会显示你当前工作目录与另外一个叫'test'分支的差别。你也以加上路径限定符，来只 比较某一个文件或目录。
<code>
$ git diff test
</code></p>

<p>显示你当前工作目录下的lib目录与上次提交之间的差别(或者更准确的 说是在当前分支)。
<code>
$ git diff HEAD -- ./lib
</code></p>

<p>如果不是查看每个文件的详细差别，而是统计一下有哪些文件被改动，有多少行被改 动，就可以使用‘&mdash;stat' 参数。</p>

<p><code>
$ git diff --stat
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多个git账号之间的切换]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/12/07/duo-ge-gitzhang-hao-zhi-jian-de-qie-huan/"/>
    <updated>2014-12-07T15:00:34+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/12/07/duo-ge-gitzhang-hao-zhi-jian-de-qie-huan</id>
    <content type="html"><![CDATA[<p>做过很多遍了，却总是记不住，这回从头来描述一下。</p>

<h1>介绍</h1>

<p>所谓多个git账号，可能有两种情况:</p>

<ul>
<li><p>我有多个github的账号，不同的账号对应不同的repo，需要push的时候自动区分账号</p></li>
<li><p>我有多个git的账号，有的是github的，有的是bitbucket的，有的是单位的gitlab的，不同账号对应不同的repo，需要push的时候自动区分账号</p></li>
</ul>


<p>这两种情况的处理方法是一样的，分下面几步走:</p>

<h1>处理</h1>

<ul>
<li><p>先假设我有两个账号，一个是github上的，一个是公司gitlab上面的。先为不同的账号生成不同的ssh-key</p>

<p>  <code>
      ssh-keygen -t rsa -f ~/.ssh/id_rsa_work -c xxx@gmail.com
 </code></p>

<p>  然后根据提示连续回车即可在~/.ssh目录下得到id_rsa_work和id_rsa_work.pub两个文件，id_rsa_work.pub文件里存放的就是我们要使用的key</p>

<p>  <code>
      ssh-keygen -t rsa -f ~/.ssh/id_rsa_github -c xxx@gmail.com
 </code></p>

<p>  然后根据提示连续回车即可在~/.ssh目录下得到id_rsa_github和id_rsa_github.pub两个文件，id_rsa_gthub.pub文件里存放的就是我们要使用的key</p></li>
<li><p>把id_rsa_xxx.pub中的key添加到github或gitlab上，这一步在github或gitlab上都有帮助，不再赘述</p></li>
<li><p>编辑 <code>~/.ssh/config</code>，设定不同的git 服务器对应不同的key</p></li>
</ul>


<p>```</p>

<pre><code># Default github user(first@mail.com),注意User项直接填git，不用填在github的用户名
Host github.com
 HostName github.com
 User git
 IdentityFile ~/.ssh/id_rsa_github

# second user(second@mail.com)
# 建一个gitlab别名，新建的帐号使用这个别名做克隆和更新
Host 172.16.11.11
 HostName 172.16.11.11
 User work
 IdentityFile ~/.ssh/id_rsa_work
</code></pre>

<p>```</p>

<p>编辑完成后可以使用命令 <code>ssh -vT git@github.com</code> 看看是不是采用了正确的id_rsa_github.pub文件</p>

<p>这样每次push的时候系统就会根据不同的仓库地址使用不同的账号提交了</p>

<ul>
<li>从上面一步可以看到，ssh区分账号，其实靠的是HostName这个字段，因此如果在github上有多个账号，很容易的可以把不同的账号映射到不同的HostName上就可以了。比如我有A和B两个账号， 先按照步骤一生成不同的key文件，再修改<code>~/.ssh/config</code> 内容应该是这样的。</li>
</ul>


<p>```</p>

<pre><code># Default github user(A@mail.com),注意User项直接填git，不用填在github的用户名
Host A.github.com
 HostName github.com
 User git
 IdentityFile ~/.ssh/id_rsa_github_A

# second user(B@mail.com)
# 建一个gitlab别名，新建的帐号使用这个别名做克隆和更新
Host A.github.com
 HostName github.com
 User git
 IdentityFile ~/.ssh/id_rsa_github_B
</code></pre>

<p>```</p>

<p>同时你的github的repo ssh url就要做相应的修改了，比如根据上面的配置,原连接地址是:</p>

<pre><code>git@github.com:testA/gopkg.git
</code></pre>

<p>那么根据上面的配置，就要把<code>github.com</code>换成<code>A.github.com</code>, 那么ssh解析的时候就会自动把<code>testA.github.com</code> 转换为 <code>github.com</code>,修改后就是</p>

<pre><code>git@A.github.com:testA/gopkg.git
</code></pre>

<p>直接更改 <code>repo/.git/config</code> 里面的url即可</p>

<p>这样每次push的时候系统就会根据不同的仓库地址使用不同的账号提交了</p>

<h1>一些题外话</h1>

<h2>我有一个repo，想要同时push到不同的仓库该如何设置?</h2>

<p>很简单， 直接更改 <code>repo/.git/config</code> 里面的url即可，把里面对应tag下的url增加一个就可以了。例:</p>

<p>```
[remote &ldquo;GitHub&rdquo;]</p>

<pre><code>url = git@github.com:elliottcable/Paws.o.git
fetch = +refs/heads/*:refs/remotes/GitHub/*
</code></pre>

<p>[branch &ldquo;Master&rdquo;]</p>

<pre><code>remote = GitHub
merge = refs/heads/Master
</code></pre>

<p>[remote &ldquo;Codaset&rdquo;]</p>

<pre><code>url = git@codaset.com:elliottcable/paws-o.git
fetch = +refs/heads/*:refs/remotes/Codaset/*
</code></pre>

<p>[remote &ldquo;Paws&rdquo;]</p>

<pre><code>url = git@github.com:Paws/Paws.o.git
fetch = +refs/heads/*:refs/remotes/Paws/*
</code></pre>

<p>[remote &ldquo;Origin&rdquo;]</p>

<pre><code>url = git@github.com:Paws/Paws.o.git
url = git@codaset.com:elliottcable/paws-o.git
</code></pre>

<p>```</p>

<p>上面这个立即就是有4个远端仓库，不同的tag表示不同的远端仓库，最后的Origin标签写法表示默认push到github和codaset这两个远端仓库去。当然，你可以自己随意定制tag和url</p>

<h2>我有一个github的repo，clone没有问题，push的时候总是报错:error: The requested URL returned error: 403 while accessing xxx</h2>

<p>这个问题也困扰了我一段时间，后来发现修改 <code>repo/.git/config</code> 里面的url，把https地址替换为ssh就好了。</p>

<p>例如</p>

<pre><code>url=https://MichaelDrogalis@github.com/derekerdmann/lunch_call.git
</code></pre>

<p>替换为</p>

<pre><code>url=ssh://git@github.com/derekerdmann/lunch_call.git
</code></pre>

<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed">http://stackoverflow.com/questions/7438313/pushing-to-git-returning-error-code-403-fatal-http-request-failed</a>
<a href="http://stackoverflow.com/questions/849308/pull-push-from-multiple-remote-locations/3195446#3195446">http://stackoverflow.com/questions/849308/pull-push-from-multiple-remote-locations/3195446#3195446</a></p>
]]></content>
  </entry>
  
</feed>
