<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | memoryboxes blog]]></title>
  <link href="http://memoryboxes.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://memoryboxes.github.io/"/>
  <updated>2015-06-19T02:06:44+00:00</updated>
  <id>http://memoryboxes.github.io/</id>
  <author>
    <name><![CDATA[memoryboxes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux Cheat Sheet]]></title>
    <link href="http://memoryboxes.github.io/blog/2015/06/19/linux-cheat-sheet/"/>
    <updated>2015-06-19T01:43:07+00:00</updated>
    <id>http://memoryboxes.github.io/blog/2015/06/19/linux-cheat-sheet</id>
    <content type="html"><![CDATA[<p>收集linux下需要多次google的命令</p>

<h2>编码问题</h2>

<ul>
<li>utf16 > utf8</li>
</ul>


<p><code>
iconv -f UTF-16 -t UTF-8 file_name
</code></p>

<h2>web开发命令</h2>

<ul>
<li>curl post 一个json文件</li>
</ul>


<p><code>
curl -H "Content-Type: application/json"--data @body.json http://localhost:8080/ui/webapp/conf
</code></p>

<ul>
<li>curl post 一个json字符串</li>
</ul>


<p><code>
curl -H "Content-Type: application/json"-d '{"username":"xyz","password":"xyz"}' http://localhost:3000/api/login
</code></p>

<h2>系统时间</h2>

<ul>
<li>centos6系列修改时区</li>
</ul>


<p><code>
ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
vim /etc/sysconfig/clock
ZONE="Asia/Shanghai"
</code></p>

<ul>
<li>centos7系列修改时区</li>
</ul>


<p><code>
timedatectl list-timezones | grep Asia
timedatectl set-timezone Asia/Shanghai
</code></p>

<h2>系统状态</h2>

<ul>
<li>查看系统占用句柄数</li>
</ul>


<p><code>
lsof -n|awk '{print $2}'|sort|uniq -c|sort -nr|more
</code></p>

<h2>程序</h2>

<ul>
<li>mongo导出</li>
</ul>


<p><code>
mongoexport  -u crossflow -p '0701!1523#SH' -authenticationDatabase admin -d bpc -c main_app_datapath -o main_app_datapath.json
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug Kernel Panic in Centos]]></title>
    <link href="http://memoryboxes.github.io/blog/2015/06/07/debug-kernel-panic-in-centos/"/>
    <updated>2015-06-07T01:22:34+00:00</updated>
    <id>http://memoryboxes.github.io/blog/2015/06/07/debug-kernel-panic-in-centos</id>
    <content type="html"><![CDATA[<p>当你面对一台新机器，出于某些原因(不是闲的慌)不得不自己编译一个内核时，会碰上kernel panic。</p>

<p>kernel panic很让人心烦，启动时的panic更让人烦，没有挂上硬盘，没有任何log的panic尤其让人烦。</p>

<p>提供几个解决问题的瞎搞方法: （以下内容针对于redhat系，但大部分方法是通用的）</p>

<h4>判断引起panic的环节</h4>

<p>简单描述下启动流程:</p>

<pre><code>1 Power On                                 Maybe Err:Worlds Collides
2 BIOS                                     Maybe Err:Worlds Collides
3 Load Grub From MBR                       Maybe Err:See nothing
4 load Grub and show it                    Maybe Err:Grub loads failed
5 Grub reads menu.list                     Maybe Err:Grub loads failed
6 Grub loads kernel image                  Maybe Err:Grub loads failed
7 kernel mounts root filesystem            Maybe Err:PANIC
8 kernel runs init                         Maybe Err:PANIC
9 init runs scripts to start               Maybe Err:PANIC
</code></pre>

<p>首先你要确认下是哪个环节引起的panic，如果你的log打得比较全，一般能根据蛛丝马迹判断是上面那个环节引起的问题。一般panic发生在step7，step8, step9环节当中。</p>

<ul>
<li><p>step9: 走到这里已经无大碍，无非是/etc/rc.sysinit 之流挂载了不该有的设备，启动了不知道神马的服务，可以直接在启动脚本中打各种log调试</p></li>
<li><p>step8: 这个就比较棘手，一般是initramfs 解压后执行某些脚本报错，所幸是大部分都是init级别的，一般可以在grub的kernel后面加参数，挂载shell调，也可以直接用工具修改initramfs镜像中的文件，重新打包二分法定位</p></li>
<li><p>step7: 也比较棘手，一般panic总要怀疑磁盘驱动，我感觉这个是导致panic的大户，另外如果屏幕没有东东输出，估计视频驱动也要鼓捣一番。</p></li>
</ul>


<p>下面针对 step7，step8级别的panic提供一些瞎搞手段</p>

<h4>在kernel 参数中加入调试开关，关闭ACPI，selinux</h4>

<p>```
  title CentOS (2.6.32-358.el6.x86_64)</p>

<pre><code>      root (hd0,0)
      kernel /vmlinuz-2.6.32-358.el6.x86_64 ro root=/dev/mapper/vg_localhost-lv_root rd_NO_LUKS rd_NO_MD rd_LVM_LV=vg_localhost/lv_swap crashkernel=128M LANG=zh_CN.UTF-8 rd_LVM_LV=vg_localhost/lv_root  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM debug selinux=0 acpi=0
      initrd /initramfs-2.6.32-358.el6.x86_64.img
</code></pre>

<p>```</p>

<p>这是考验人品的时候，不管三七二十一，先把最有可能的问题点排除掉。另外redhat系的会在kernel后面加上 <code>rhgb quiet</code> 之类的参数，统统去掉，开机的时候好好盯着屏幕看看，有没有可疑的东东输出。 因为系统可能会在短时间内输出大量log而没有记录，你需要设置一下输出log的速率和暂停时机，更详细的参数可以在这里找到:</p>

<p><a href="https://wiki.archlinux.org/index.php/Boot_debugging">https://wiki.archlinux.org/index.php/Boot_debugging</a></p>

<h4>在kernel 参数中加入dracut的调试开关</h4>

<p>redhat系后期采用了dracut构建 initrd镜像，关于dracut的手册在这里:</p>

<p><a href="http://people.redhat.com/harald/dracut-rhel6.html#lsinitrd">http://people.redhat.com/harald/dracut-rhel6.html#lsinitrd</a></p>

<p>调试开关在这里:</p>

<p><a href="https://fedoraproject.org/wiki/How_to_debug_Dracut_problems">https://fedoraproject.org/wiki/How_to_debug_Dracut_problems</a></p>

<p>你可以设定rdshell，在panic之后跳入dracut提供的shell，打dmesg看看log信息。</p>

<h3>最后的最后，实在不知道为啥了，而且你很闲，可以考虑启动时加串口设备调试</h3>

<h4>一些tooltip</h4>

<ul>
<li><p>编译kernel的时候，make menuconfig，3.10以后的内核支持搜索某个开关后按数字键直接跳到那个开关的设置项中，这个很有用</p></li>
<li><p>redhat系用dracut构建initrd，配置文件默认在 /usr/share/dracut/ ，如果你懒得改 initramfs，可以直接修改里面的配置文件，然后重新make install即可</p></li>
<li><p>有时候你不好确认根文件系统挂载到哪里了，可以参考这里:</p></li>
</ul>


<p><a href="http://free-electrons.com/blog/find-root-device/">http://free-electrons.com/blog/find-root-device/</a></p>

<p>其它参考资料:</p>

<p><a href="http://www.tuxradar.com/content/how-fix-linux-boot-problems">http://www.tuxradar.com/content/how-fix-linux-boot-problems</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux多网卡多路由设置]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/12/30/linuxshuang-wang-qia-shuang-lu-you-she-zhi/"/>
    <updated>2014-12-30T01:40:53+00:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/12/30/linuxshuang-wang-qia-shuang-lu-you-she-zhi</id>
    <content type="html"><![CDATA[<p>折腾了半天，原始出处不知道了，转记一下。</p>

<p>比如如果一个linux服务器有三个口接三个不同的网络，假设对应的网络信息是如此</p>

<ul>
<li><p>eth0是电信，ip地址为1.1.1.1/24，电信网关为1.1.1.254</p></li>
<li><p>eth1是网通，ip地址为2.2.2.2/24，网通网关为2.2.2.254</p></li>
<li><p>eth2是教育网，ip地址为3.3.3.3/24，教育网网关为3.3.3.254</p></li>
</ul>


<p>传统情况下，如果是为了从内向外访问获得更好的速度，让访问电信走电信，访问网通走网通，那么配置是网关只能够配置一个。</p>

<p>比如以电信为主的，那么网关就只设置电信的1.1.1.254，而针对网通和教育网设置不同的路由，路由下一跳指向网通和教育网对应的 网关。</p>

<p>如果这样做的目的只是实现内部访问外面，那么是没问题了，但是如果是为了让外面的用户能够正常访问到服务器上的服务就会出问题。比如电信用户会无法访问网通和教育网的ip，网通用户会无法访问电信和教育网的ip。</p>

<p>要解决这个问题，思路就是由哪个网口进来的流量希望全部就由哪个回去。用lartc里面提到的方法就是来源的口不同，走不同的路由表。在默认的路由表基础上再建立三个路由表。</p>

<p>用 ip route show 可以看到默认有local,main,default三个路由表，这三个路由表的名称命名来自 /etc/iproute2/rt_tables ，这里先在这个配置文件里面添加三个不同的路由表表名，</p>

<p><code>
echo “101 ChinaNet” &gt;&gt; /etc/iproute2/rt_tables
echo ”102 ChinaCnc“ &gt;&gt; /etc/iproute2/rt_tables
echo ”103 ChinaEdu“ &gt;&gt; /etc/iproute2/rt_tables
</code></p>

<p>之后建立这三个路由表的内容，因为这三个路由表的只是用来响应来自不同接口的，而不是用来相应从哪个接口出去的，所以只需要每个路由表里面建立默认网关即可。</p>

<p><code>
ip route add default via 1.1.1.254 dev eth0 table ChinaNet
ip route add default via 2.2.2.254 dev eth1 table ChinaCnc
ip route add default via 3.3.3.254 dev eth2 table ChinaEdu
</code></p>

<p>之后再加上三条规则，使来自不同的口的走不同的路由表</p>

<p><code>
ip rule add from 1.1.1.1 table ChinaNet
ip rule add from 2.2.2.2 table ChinaCnc
ip rule add from 3.3.3.3 table ChinaEdu
</code></p>

<p>至此无论是电信还是网通还是教育网用户，访问三个ip的任意一个地址都能够连通了。即便是服务器上本身的默认路由都没有设置，也能够让外面的用户正常访问。</p>

<p>命令汇总：</p>

<p>```
ip route show</p>

<p>echo “101 ChinaNet” >> /etc/iproute2/rt_tables
echo ”102 ChinaCnc“ >> /etc/iproute2/rt_tables
echo ”103 ChinaEdu“ >> /etc/iproute2/rt_tables // 这里也可以直接通过Vi编辑</p>

<p>ip route add default via 1.1.1.254 dev eth0 table ChinaNet
ip route add default via 2.2.2.254 dev eth1 table ChinaCnc
ip route add default via 3.3.3.254 dev eth2 table ChinaEdu</p>

<p>ip rule add from 1.1.1.1 table ChinaNet
ip rule add from 2.2.2.2 table ChinaCnc
ip rule add from 3.3.3.3 table ChinaEdu //如果用数字，可以不要上面的“echo”过程
```</p>
]]></content>
  </entry>
  
</feed>
