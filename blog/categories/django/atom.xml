<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Django | memoryboxes blog]]></title>
  <link href="http://memoryboxes.github.io/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://memoryboxes.github.io/"/>
  <updated>2014-09-17T08:44:49+08:00</updated>
  <id>http://memoryboxes.github.io/</id>
  <author>
    <name><![CDATA[memoryboxes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自定义Django的密码策略]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/09/17/zi-ding-yi-djangode-mi-ma-ce-lue/"/>
    <updated>2014-09-17T08:38:03+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/09/17/zi-ding-yi-djangode-mi-ma-ce-lue</id>
    <content type="html"><![CDATA[<p>Django 从1.4 版本开始，包含了一些安全方面的重要提升。其中一个是使用 PBKDF2 密码加密算法代替了 SHA1 。另外一个特性是你可以添加自己的密码加密方法。</p>

<p>Django 会使用你提供的第一个密码加密方法（在你的 setting.py 文件里要至少有一个方法）</p>

<p>```
PASSWORD_HASHERS = (</p>

<pre><code>'django.contrib.auth.hashers.PBKDF2PasswordHasher',
'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
'django.contrib.auth.hashers.BCryptPasswordHasher',
'django.contrib.auth.hashers.SHA1PasswordHasher', # Insecure Hashes
'django.contrib.auth.hashers.MD5PasswordHasher', # Insecure Hashes
'django.contrib.auth.hashers.CryptPasswordHasher', # Insecure Hashes
</code></pre>

<p>)
```</p>

<p>但Django默认生成的密码策略往往会带上 md5_xxx, pbkdf2_xxx，同其他系统整合的时候，一般是没有这些前缀的，这就需要我们自定义一个密码策略。</p>

<p>下面介绍下如何定义一个简单的 <code>md5(md5(password, salt))</code> 密码策略。</p>

<h3>step1</h3>

<p>建立一个app，django-admin.py startapp ownmd5</p>

<h3>step2</h3>

<p>在 ownmd5中 建立 hashers.py 文件，加入 OwnMd5PasswordHasher 类</p>

<p>```
import hashlib
from django.utils.translation import ugettext_noop as _
from django.utils.datastructures import SortedDict
from django.utils.crypto import constant_time_compare
from django.utils.encoding import force_bytes, force_str, force_text
from django.contrib.auth.hashers import BasePasswordHasher, mask_hash</p>

<p>class OwnMD5PasswordHasher(BasePasswordHasher):</p>

<pre><code>"""
The Salted MD5 password hashing algorithm (not recommended)
"""
algorithm = "ownmd5"

def encode(self, password, salt):
    assert password is not None
    assert salt and '$' not in salt
    hash = hashlib.md5(hashlib.md5(force_bytes(salt + password)).hexdigest()).hexdigest()
    return hash

def verify(self, password, encoded, salt):
    encoded_2 = self.encode(password, salt)
    return constant_time_compare(encoded, encoded_2)

def safe_summary(self, encoded, salt):
    return SortedDict([
        (_('algorithm'), self.algorithm),
        (_('salt'), mask_hash(salt, show=4)),
        (_('hash'), mask_hash(hash)),
    ])
</code></pre>

<p>```</p>

<h3>step3</h3>

<p>将 OwnMD5PasswordHasher 加入到settings.py 中:
```
PASSWORD_HASHERS = (</p>

<pre><code>'ownmd5.hashers.OwnMD5PasswordHasher',
</code></pre>

<p>)
```
这样，默认的user及auth模块都会采用自定义的md5算法。</p>

<p>参考:</p>

<p><a href="https://docs.djangoproject.com/en/1.6/topics/auth/passwords/">https://docs.djangoproject.com/en/1.6/topics/auth/passwords/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto Reload Modules in Django Shell]]></title>
    <link href="http://memoryboxes.github.io/blog/2014/09/17/auto-reload-modules-in-django-shell/"/>
    <updated>2014-09-17T08:36:01+08:00</updated>
    <id>http://memoryboxes.github.io/blog/2014/09/17/auto-reload-modules-in-django-shell</id>
    <content type="html"><![CDATA[<p><code>python manage.py shell</code></p>

<p>太常用了，但是每次修改模块代码后，总要 exit—>reset 才能重新load一遍代码，实在是不爽。</p>

<p>也曾经改造ipython，想要代码修改后实时载入，各种坑，最后各种懒之下还是老老实实reload。</p>

<p>最近发现一个扩展，django-externsions:</p>

<p><a href="https://github.com/django-extensions/django-extensions">https://github.com/django-extensions/django-extensions</a></p>

<p>装上好用不少，貌似还比较靠谱，推荐之。</p>
]]></content>
  </entry>
  
</feed>
